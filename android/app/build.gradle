def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    // change to
    // compileSdkVersion flutter.compileSdkVersion
    // when flutter change to >= 33 in
    // https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/flutter.gradle#L33
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.abilia"
        minSdkVersion 21
        // change to
        // targetSdkVersion flutter.targetSdkVersion
        // when flutter change to >= 33 in
        // https://github.com/flutter/flutter/blob/master/packages/flutter_tools/gradle/flutter.gradle#L39
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            storeFile rootProject.file("app/upload-keystore.jks")
            storePassword System.getenv("APPCENTER_KEYSTORE_PASSWORD")
            keyAlias "upload"
            keyPassword System.getenv("APPCENTER_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }

    flavorDimensions "flavors"
    productFlavors {
        mpgo {
            dimension "flavors"
            applicationIdSuffix ".memoplannergo"
        }
        mp {
            dimension "flavors"
            applicationIdSuffix ".memoplanner"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
