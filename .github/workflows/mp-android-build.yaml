name: MEMOPlanner Android Build

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - 'handi/**'
      - 'memoplanner/ios/**'
      - 'memoplanner/test*/**'
      - 'packages/**'
      - '**/*.md'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        flavor: [ 'mp', 'mpgo' ]
    defaults:
      run:
        working-directory: ./memoplanner
    steps:
      - uses: actions/checkout@v3
      - uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_ABILIA_OPEN_API_KEY: ${{ secrets.DEVICE_API_KEY }}
          directory: ./memoplanner/lib/env/
          file_name: .env.key
          fail_on_empty: true
      - uses: subosito/flutter-action@v2.5.0
        with:
          flutter-version: '3.7.5'
          channel: 'stable'

      - run: flutter pub get
      - run: flutter packages pub run build_runner build --delete-conflicting-outputs
      - run: |
          flutter test --reporter expanded --dart-define flavor=${{ matrix.flavor }} --flavor ${{ matrix.flavor }}

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: test
    outputs:
      releasetype: ${{ steps.set_release_type.outputs.releasetype }}
    strategy:
      matrix:
        flavor: [ 'mp', 'mpgo' ]
    defaults:
      run:
        working-directory: ./memoplanner
    steps:
      - uses: actions/checkout@v3
      - uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_ABILIA_OPEN_API_KEY: ${{ secrets.DEVICE_API_KEY }}
          directory: ./memoplanner/lib/env/
          file_name: .env.key
          fail_on_empty: true
      - uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - uses: subosito/flutter-action@v2.5.0
        with:
          flutter-version: '3.7.5'
          channel: 'stable'

      - id: set_build_number
        name: Set build number
        run: |
          version=$(( $GITHUB_RUN_NUMBER + 2000))
          echo "buildnumber=$version" >> $GITHUB_OUTPUT

      - id: set_release_type
        name: Set release type
        run: |
          type=$([[ $GITHUB_REF == "refs/heads/release" ]] && echo "release" || echo "dev")
          echo "releasetype=$type" >> $GITHUB_OUTPUT

      - run: flutter pub get
      - run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Build artifact
        run: |
          flutter build appbundle \
            --flavor ${{ matrix.flavor }} \
            --build-number=${{ steps.set_build_number.outputs.buildnumber }} \
            --dart-define release=${{ steps.set_release_type.outputs.releasetype }} \
            --dart-define flavor=${{ matrix.flavor }}

        env:
          KEYSTORE_PASSWORD: ${{ secrets.APPCENTER_KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.APPCENTER_KEY_PASSWORD }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-${{ matrix.flavor }}-release
          path: ./memoplanner/build/app/outputs/bundle/**/app-${{ matrix.flavor }}-release.aab
          retention-days: 1

  upload:
    name: Upload to Google play
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    strategy:
      fail-fast: false
      matrix:
        flavor: [ 'mp', 'mpgo' ]
    steps:

      - id: set_package_name
        name: Set package name
        run: |
          packageName=$( ${{ contains(matrix.flavor, 'go') }} && echo "com.abilia.memoplannergo" || echo "com.abilia.memoplanner" )
          echo "packageName=$packageName" >> $GITHUB_OUTPUT

      - id: decide_track
        name: Decide Google play track
        run: |
          if [[ "${{ needs.build.outputs.releasetype }}" == "release" ]]
          then
            track="alpha"
          elif [[ $GITHUB_REF == refs/heads/test-* ]]
          then
            track="memotrack"
          elif ${{ contains(matrix.flavor, 'go') }}
          then
            track="internal"
          else
            track="Development track"
          fi
          echo "track=$track" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-${{ matrix.flavor }}-release
      - name: Upload artifact to Google play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ env.SERVICE_ACCOUNT_JSON }}
          packageName: ${{ steps.set_package_name.outputs.packageName }}
          releaseFiles: ./**/app-${{ matrix.flavor }}-release.aab
          track: ${{ steps.decide_track.outputs.track }}
          status: completed
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}

      - name: Clean up uploaded artifacts from GitHub storage
        uses: geekyeggo/delete-artifact@v1
        with:
          name: app-${{ matrix.flavor }}-release
