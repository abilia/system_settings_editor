// Mocks generated by Mockito 5.0.15 from annotations
// in seagull/test/mocks/shared.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:convert' as _i13;
import 'dart:io' as _i8;
import 'dart:typed_data' as _i24;
import 'dart:ui' as _i23;

import 'package:bloc/bloc.dart' as _i22;
import 'package:flutter/animation.dart';
import 'package:flutter/gestures.dart' as _i14;
import 'package:flutter/material.dart' as _i12;
import 'package:flutter/rendering.dart' as _i25;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i16;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i17;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i19;
import 'package:flutter_local_notifications/src/platform_specifics/ios/enums.dart'
    as _i20;
import 'package:flutter_local_notifications/src/types.dart' as _i21;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i18;
import 'package:http/http.dart' as _i5;
import 'package:logging/logging.dart' as _i4;
import 'package:mockito/mockito.dart' as _i2;
import 'package:seagull/bloc/activities/edit_recurring_mixin.dart' as _i11;
import 'package:seagull/bloc/all.dart' as _i10;
import 'package:seagull/db/all.dart' as _i3;
import 'package:seagull/models/all.dart' as _i1;
import 'package:seagull/repository/all.dart' as _i6;
import 'package:seagull/storage/all.dart' as _i7;
import 'package:shared_preferences/shared_preferences.dart' as _i15;

import 'shared.dart' as _i26;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDataDb_0<M extends _i1.DataModel> extends _i2.Fake
    implements _i3.DataDb<M> {}

class _FakeLogger_1 extends _i2.Fake implements _i4.Logger {}

class _FakeDbModel_2<M extends _i1.DataModel> extends _i2.Fake
    implements _i1.DbModel<M> {}

class _FakeBaseClient_3 extends _i2.Fake implements _i5.BaseClient {}

class _FakeDataUpdateResponse_4 extends _i2.Fake
    implements _i1.DataUpdateResponse {}

class _FakeTokenDb_5 extends _i2.Fake implements _i3.TokenDb {}

class _FakeUserDb_6 extends _i2.Fake implements _i3.UserDb {}

class _FakeLicenseDb_7 extends _i2.Fake implements _i3.LicenseDb {}

class _FakeUserRepository_8 extends _i2.Fake implements _i6.UserRepository {}

class _FakeUser_9 extends _i2.Fake implements _i1.User {}

class _FakeUserFileDb_10 extends _i2.Fake implements _i3.UserFileDb {}

class _FakeFileStorage_11 extends _i2.Fake implements _i7.FileStorage {}

class _FakeMultipartRequestBuilder_12 extends _i2.Fake
    implements _i6.MultipartRequestBuilder {}

class _FakeFile_13 extends _i2.Fake implements _i8.File {}

class _FakeActivityRepository_14 extends _i2.Fake
    implements _i6.ActivityRepository {}

class _FakeStreamSubscription_15<T> extends _i2.Fake
    implements _i9.StreamSubscription<T> {}

class _FakeSyncBloc_16 extends _i2.Fake implements _i10.SyncBloc {}

class _FakeActivitiesState_17 extends _i2.Fake implements _i10.ActivitiesState {
}

class _FakeActivityMappingResult_18 extends _i2.Fake
    implements _i11.ActivityMappingResult {}

class _FakeDayActivitiesBloc_19 extends _i2.Fake
    implements _i10.DayActivitiesBloc {}

class _FakeClockBloc_20 extends _i2.Fake implements _i10.ClockBloc {}

class _FakeActivitiesOccasionState_21 extends _i2.Fake
    implements _i10.ActivitiesOccasionState {}

class _FakeActivitiesOccasionLoaded_22 extends _i2.Fake
    implements _i10.ActivitiesOccasionLoaded {}

class _FakeUserFileRepository_23 extends _i2.Fake
    implements _i6.UserFileRepository {}

class _FakeSortableRepository_24 extends _i2.Fake
    implements _i6.SortableRepository {}

class _FakeGenericRepository_25 extends _i2.Fake
    implements _i6.GenericRepository {}

class _FakeSyncDelays_26 extends _i2.Fake implements _i10.SyncDelays {}

class _FakeSyncState_27 extends _i2.Fake implements _i10.SyncState {}

class _FakePushState_28 extends _i2.Fake implements _i10.PushState {}

class _FakeGenericState_29 extends _i2.Fake implements _i10.GenericState {}

class _FakeSortableState_30 extends _i2.Fake implements _i10.SortableState {}

class _FakeMemoplannerSettingsState_31 extends _i2.Fake
    implements _i10.MemoplannerSettingsState {}

class _FakeTimepillarState_32 extends _i2.Fake implements _i10.TimepillarState {
}

class _FakeUserFileState_33 extends _i2.Fake implements _i10.UserFileState {}

class _FakeUserFile_34 extends _i2.Fake implements _i1.UserFile {}

class _FakeScrollPosition_35 extends _i2.Fake implements _i12.ScrollPosition {}

class _FakeMultipartRequest_36 extends _i2.Fake
    implements _i5.MultipartRequest {}

class _FakeUri_37 extends _i2.Fake implements Uri {}

class _FakeByteStream_38 extends _i2.Fake implements _i5.ByteStream {}

class _FakeStreamedResponse_39 extends _i2.Fake
    implements _i5.StreamedResponse {}

class _FakeDuration_40 extends _i2.Fake implements Duration {}

class _FakeHttpClientRequest_41 extends _i2.Fake
    implements _i8.HttpClientRequest {}

class _FakeHttpHeaders_42 extends _i2.Fake implements _i8.HttpHeaders {}

class _FakeHttpClientResponse_43 extends _i2.Fake
    implements _i8.HttpClientResponse {}

class _FakeEncoding_44 extends _i2.Fake implements _i13.Encoding {}

class _FakeSocket_45 extends _i2.Fake implements _i8.Socket {}

class _FakeScrollPhysics_46 extends _i2.Fake implements _i12.ScrollPhysics {}

class _FakeScrollContext_47 extends _i2.Fake implements _i12.ScrollContext {}

class _FakeValueNotifier_48<T> extends _i2.Fake
    implements _i12.ValueNotifier<T> {}

class _FakeScrollHoldController_49 extends _i2.Fake
    implements _i12.ScrollHoldController {}

class _FakeDrag_50 extends _i2.Fake implements _i14.Drag {}

class _FakeScrollMetrics_51 extends _i2.Fake implements _i12.ScrollMetrics {}

class _FakeBatch_52 extends _i2.Fake implements _i3.Batch {}

class _FakeResponse_53 extends _i2.Fake implements _i5.Response {}

class _FakeSharedPreferences_54 extends _i2.Fake
    implements _i15.SharedPreferences {}

class _FakeDatabase_55 extends _i2.Fake implements _i3.Database {}

/// A class which mocks [ActivityRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityRepository extends _i2.Mock
    implements _i6.ActivityRepository {
  MockActivityRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.DataDb<_i1.Activity> get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDataDb_0<_i1.Activity>()) as _i3.DataDb<_i1.Activity>);
  @override
  String get authToken =>
      (super.noSuchMethod(Invocation.getter(#authToken), returnValue: '')
          as String);
  @override
  int get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: 0) as int);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get postPath =>
      (super.noSuchMethod(Invocation.getter(#postPath), returnValue: '')
          as String);
  @override
  int get postApiVersion =>
      (super.noSuchMethod(Invocation.getter(#postApiVersion), returnValue: 0)
          as int);
  @override
  _i6.JsonToDataModel<_i1.Activity> get fromJsonToDataModel =>
      (super.noSuchMethod(Invocation.getter(#fromJsonToDataModel),
              returnValue: (Map<String, dynamic> json) =>
                  _FakeDbModel_2<_i1.Activity>())
          as _i6.JsonToDataModel<_i1.Activity>);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i5.BaseClient get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeBaseClient_3()) as _i5.BaseClient);
  @override
  _i9.Future<bool> save(Iterable<_i1.Activity>? data) =>
      (super.noSuchMethod(Invocation.method(#save, [data]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<Iterable<_i1.Activity>> load() => (super.noSuchMethod(
          Invocation.method(#load, []),
          returnValue: Future<Iterable<_i1.Activity>>.value(<_i1.Activity>[]))
      as _i9.Future<Iterable<_i1.Activity>>);
  @override
  _i9.Future<dynamic> fetchIntoDatabaseSynchronized() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabaseSynchronized, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> fetchIntoDatabase() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabase, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<Iterable<_i1.DbModel<_i1.Activity>>> fetchData(int? revision) =>
      (super.noSuchMethod(Invocation.method(#fetchData, [revision]),
              returnValue: Future<Iterable<_i1.DbModel<_i1.Activity>>>.value(
                  <_i1.DbModel<_i1.Activity>>[]))
          as _i9.Future<Iterable<_i1.DbModel<_i1.Activity>>>);
  @override
  _i9.Future<bool> synchronize() =>
      (super.noSuchMethod(Invocation.method(#synchronize, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i1.DataUpdateResponse> postData(
          Iterable<_i1.DbModel<_i1.Activity>>? data) =>
      (super.noSuchMethod(Invocation.method(#postData, [data]),
              returnValue: Future<_i1.DataUpdateResponse>.value(
                  _FakeDataUpdateResponse_4()))
          as _i9.Future<_i1.DataUpdateResponse>);
  @override
  _i9.Future<dynamic> handleFailedSync(
          Iterable<_i1.DataRevisionUpdate>? failed) =>
      (super.noSuchMethod(Invocation.method(#handleFailedSync, [failed]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> handleSuccessfullSync(
          Iterable<_i1.DataRevisionUpdate>? succeeded,
          Iterable<_i1.DbModel<_i1.Activity>>? dirtyData) =>
      (super.noSuchMethod(
          Invocation.method(#handleSuccessfullSync, [succeeded, dirtyData]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i2.Mock implements _i6.UserRepository {
  MockUserRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.TokenDb get tokenDb => (super.noSuchMethod(Invocation.getter(#tokenDb),
      returnValue: _FakeTokenDb_5()) as _i3.TokenDb);
  @override
  _i3.UserDb get userDb => (super.noSuchMethod(Invocation.getter(#userDb),
      returnValue: _FakeUserDb_6()) as _i3.UserDb);
  @override
  _i3.LicenseDb get licenseDb =>
      (super.noSuchMethod(Invocation.getter(#licenseDb),
          returnValue: _FakeLicenseDb_7()) as _i3.LicenseDb);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i5.BaseClient get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeBaseClient_3()) as _i5.BaseClient);
  @override
  _i6.UserRepository copyWith({String? baseUrl, _i5.BaseClient? client}) =>
      (super.noSuchMethod(
          Invocation.method(
              #copyWith, [], {#baseUrl: baseUrl, #client: client}),
          returnValue: _FakeUserRepository_8()) as _i6.UserRepository);
  @override
  _i9.Future<String> authenticate(
          {String? username,
          String? password,
          String? pushToken,
          DateTime? time}) =>
      (super.noSuchMethod(
          Invocation.method(#authenticate, [], {
            #username: username,
            #password: password,
            #pushToken: pushToken,
            #time: time
          }),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i1.User> me(String? token) =>
      (super.noSuchMethod(Invocation.method(#me, [token]),
              returnValue: Future<_i1.User>.value(_FakeUser_9()))
          as _i9.Future<_i1.User>);
  @override
  _i9.Future<_i1.User> getUserFromDb() =>
      (super.noSuchMethod(Invocation.method(#getUserFromDb, []),
              returnValue: Future<_i1.User>.value(_FakeUser_9()))
          as _i9.Future<_i1.User>);
  @override
  _i9.Future<_i1.User> getUserFromApi(String? token) =>
      (super.noSuchMethod(Invocation.method(#getUserFromApi, [token]),
              returnValue: Future<_i1.User>.value(_FakeUser_9()))
          as _i9.Future<_i1.User>);
  @override
  _i9.Future<List<_i1.License>> getLicenses() =>
      (super.noSuchMethod(Invocation.method(#getLicenses, []),
              returnValue: Future<List<_i1.License>>.value(<_i1.License>[]))
          as _i9.Future<List<_i1.License>>);
  @override
  _i9.Future<List<_i1.License>> getLicensesFromApi(String? token) =>
      (super.noSuchMethod(Invocation.method(#getLicensesFromApi, [token]),
              returnValue: Future<List<_i1.License>>.value(<_i1.License>[]))
          as _i9.Future<List<_i1.License>>);
  @override
  _i9.Future<dynamic> logout([String? token]) =>
      (super.noSuchMethod(Invocation.method(#logout, [token]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<void> persistToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#persistToken, [token]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> createAccount(
          {String? language,
          String? usernameOrEmail,
          String? password,
          bool? termsOfUse,
          bool? privacyPolicy}) =>
      (super.noSuchMethod(
          Invocation.method(#createAccount, [], {
            #language: language,
            #usernameOrEmail: usernameOrEmail,
            #password: password,
            #termsOfUse: termsOfUse,
            #privacyPolicy: privacyPolicy
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SortableRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSortableRepository extends _i2.Mock
    implements _i6.SortableRepository {
  MockSortableRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.DataDb<_i1.Sortable<_i1.SortableData>> get db =>
      (super.noSuchMethod(Invocation.getter(#db),
              returnValue: _FakeDataDb_0<_i1.Sortable<_i1.SortableData>>())
          as _i3.DataDb<_i1.Sortable<_i1.SortableData>>);
  @override
  String get authToken =>
      (super.noSuchMethod(Invocation.getter(#authToken), returnValue: '')
          as String);
  @override
  int get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: 0) as int);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get postPath =>
      (super.noSuchMethod(Invocation.getter(#postPath), returnValue: '')
          as String);
  @override
  int get postApiVersion =>
      (super.noSuchMethod(Invocation.getter(#postApiVersion), returnValue: 0)
          as int);
  @override
  _i6.JsonToDataModel<_i1.Sortable<_i1.SortableData>> get fromJsonToDataModel =>
      (super.noSuchMethod(Invocation.getter(#fromJsonToDataModel),
              returnValue: (Map<String, dynamic> json) =>
                  _FakeDbModel_2<_i1.Sortable<_i1.SortableData>>())
          as _i6.JsonToDataModel<_i1.Sortable<_i1.SortableData>>);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i5.BaseClient get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeBaseClient_3()) as _i5.BaseClient);
  @override
  _i9.Future<bool> save(Iterable<_i1.Sortable<_i1.SortableData>>? data) =>
      (super.noSuchMethod(Invocation.method(#save, [data]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<Iterable<_i1.Sortable<_i1.SortableData>>> load() =>
      (super.noSuchMethod(Invocation.method(#load, []),
          returnValue: Future<Iterable<_i1.Sortable<_i1.SortableData>>>.value(
              <_i1.Sortable<_i1.SortableData>>[])) as _i9
          .Future<Iterable<_i1.Sortable<_i1.SortableData>>>);
  @override
  _i9.Future<dynamic> fetchIntoDatabaseSynchronized() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabaseSynchronized, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> fetchIntoDatabase() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabase, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>> fetchData(
          int? revision) =>
      (super.noSuchMethod(Invocation.method(#fetchData, [revision]),
          returnValue: Future<
                  Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>.value(
              <_i1.DbModel<_i1.Sortable<_i1.SortableData>>>[])) as _i9
          .Future<Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>);
  @override
  _i9.Future<bool> synchronize() =>
      (super.noSuchMethod(Invocation.method(#synchronize, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i1.DataUpdateResponse> postData(
          Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>? data) =>
      (super.noSuchMethod(Invocation.method(#postData, [data]),
              returnValue: Future<_i1.DataUpdateResponse>.value(
                  _FakeDataUpdateResponse_4()))
          as _i9.Future<_i1.DataUpdateResponse>);
  @override
  _i9.Future<dynamic> handleFailedSync(
          Iterable<_i1.DataRevisionUpdate>? failed) =>
      (super.noSuchMethod(Invocation.method(#handleFailedSync, [failed]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> handleSuccessfullSync(
          Iterable<_i1.DataRevisionUpdate>? succeeded,
          Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>? dirtyData) =>
      (super.noSuchMethod(
          Invocation.method(#handleSuccessfullSync, [succeeded, dirtyData]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserFileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserFileRepository extends _i2.Mock
    implements _i6.UserFileRepository {
  MockUserFileRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.UserFileDb get userFileDb =>
      (super.noSuchMethod(Invocation.getter(#userFileDb),
          returnValue: _FakeUserFileDb_10()) as _i3.UserFileDb);
  @override
  _i7.FileStorage get fileStorage =>
      (super.noSuchMethod(Invocation.getter(#fileStorage),
          returnValue: _FakeFileStorage_11()) as _i7.FileStorage);
  @override
  _i6.MultipartRequestBuilder get multipartRequestBuilder =>
      (super.noSuchMethod(Invocation.getter(#multipartRequestBuilder),
              returnValue: _FakeMultipartRequestBuilder_12())
          as _i6.MultipartRequestBuilder);
  @override
  _i3.DataDb<_i1.UserFile> get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDataDb_0<_i1.UserFile>()) as _i3.DataDb<_i1.UserFile>);
  @override
  String get authToken =>
      (super.noSuchMethod(Invocation.getter(#authToken), returnValue: '')
          as String);
  @override
  int get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: 0) as int);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get postPath =>
      (super.noSuchMethod(Invocation.getter(#postPath), returnValue: '')
          as String);
  @override
  int get postApiVersion =>
      (super.noSuchMethod(Invocation.getter(#postApiVersion), returnValue: 0)
          as int);
  @override
  _i6.JsonToDataModel<_i1.UserFile> get fromJsonToDataModel =>
      (super.noSuchMethod(Invocation.getter(#fromJsonToDataModel),
              returnValue: (Map<String, dynamic> json) =>
                  _FakeDbModel_2<_i1.UserFile>())
          as _i6.JsonToDataModel<_i1.UserFile>);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i5.BaseClient get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeBaseClient_3()) as _i5.BaseClient);
  @override
  _i9.Future<Iterable<_i1.UserFile>> getAllLoadedFiles() => (super.noSuchMethod(
          Invocation.method(#getAllLoadedFiles, []),
          returnValue: Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
      as _i9.Future<Iterable<_i1.UserFile>>);
  @override
  _i9.Future<Iterable<_i1.UserFile>> load() => (super.noSuchMethod(
          Invocation.method(#load, []),
          returnValue: Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
      as _i9.Future<Iterable<_i1.UserFile>>);
  @override
  _i9.Future<bool> synchronize() =>
      (super.noSuchMethod(Invocation.method(#synchronize, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<Iterable<_i1.UserFile>> downloadUserFiles({int? limit}) => (super
      .noSuchMethod(Invocation.method(#downloadUserFiles, [], {#limit: limit}),
          returnValue:
              Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[])) as _i9
      .Future<Iterable<_i1.UserFile>>);
  @override
  _i9.Future<bool> save(Iterable<_i1.UserFile>? data) =>
      (super.noSuchMethod(Invocation.method(#save, [data]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<dynamic> fetchIntoDatabaseSynchronized() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabaseSynchronized, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> fetchIntoDatabase() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabase, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<Iterable<_i1.DbModel<_i1.UserFile>>> fetchData(int? revision) =>
      (super.noSuchMethod(Invocation.method(#fetchData, [revision]),
              returnValue: Future<Iterable<_i1.DbModel<_i1.UserFile>>>.value(
                  <_i1.DbModel<_i1.UserFile>>[]))
          as _i9.Future<Iterable<_i1.DbModel<_i1.UserFile>>>);
  @override
  _i9.Future<_i1.DataUpdateResponse> postData(
          Iterable<_i1.DbModel<_i1.UserFile>>? data) =>
      (super.noSuchMethod(Invocation.method(#postData, [data]),
              returnValue: Future<_i1.DataUpdateResponse>.value(
                  _FakeDataUpdateResponse_4()))
          as _i9.Future<_i1.DataUpdateResponse>);
  @override
  _i9.Future<dynamic> handleFailedSync(
          Iterable<_i1.DataRevisionUpdate>? failed) =>
      (super.noSuchMethod(Invocation.method(#handleFailedSync, [failed]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> handleSuccessfullSync(
          Iterable<_i1.DataRevisionUpdate>? succeeded,
          Iterable<_i1.DbModel<_i1.UserFile>>? dirtyData) =>
      (super.noSuchMethod(
          Invocation.method(#handleSuccessfullSync, [succeeded, dirtyData]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebasePushService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebasePushService extends _i2.Mock
    implements _i6.FirebasePushService {
  MockFirebasePushService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.Future<String?> initPushToken() =>
      (super.noSuchMethod(Invocation.method(#initPushToken, []),
          returnValue: Future<String?>.value()) as _i9.Future<String?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FileStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileStorage extends _i2.Mock implements _i7.FileStorage {
  MockFileStorage() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get fileEnding =>
      (super.noSuchMethod(Invocation.getter(#fileEnding), returnValue: '')
          as String);
  @override
  int get maxSizeInBytes =>
      (super.noSuchMethod(Invocation.getter(#maxSizeInBytes), returnValue: 0)
          as int);
  @override
  _i9.Future<void> storeFile(List<int>? fileBytes, String? fileName) =>
      (super.noSuchMethod(Invocation.method(#storeFile, [fileBytes, fileName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> storeImageThumb(
          List<int>? fileBytes, _i1.ImageThumb? imageThumb) =>
      (super.noSuchMethod(
          Invocation.method(#storeImageThumb, [fileBytes, imageThumb]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i8.File getFile(String? id) =>
      (super.noSuchMethod(Invocation.method(#getFile, [id]),
          returnValue: _FakeFile_13()) as _i8.File);
  @override
  _i8.File getImageThumb(_i1.ImageThumb? imageThumb) =>
      (super.noSuchMethod(Invocation.method(#getImageThumb, [imageThumb]),
          returnValue: _FakeFile_13()) as _i8.File);
  @override
  _i9.Future<dynamic> deleteUserFolder() =>
      (super.noSuchMethod(Invocation.method(#deleteUserFolder, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<bool> exists(_i8.File? file) =>
      (super.noSuchMethod(Invocation.method(#exists, [file]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i8.File?> copyImageThumbForNotification(String? id) => (super
      .noSuchMethod(Invocation.method(#copyImageThumbForNotification, [id]),
          returnValue: Future<_i8.File?>.value()) as _i9.Future<_i8.File?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i2.Mock
    implements _i16.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool?> initialize(
          _i17.InitializationSettings? initializationSettings,
          {_i18.SelectNotificationCallback? onSelectNotification}) =>
      (super.noSuchMethod(
          Invocation.method(#initialize, [initializationSettings],
              {#onSelectNotification: onSelectNotification}),
          returnValue: Future<bool?>.value()) as _i9.Future<bool?>);
  @override
  _i9.Future<_i18.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
              Invocation.method(#getNotificationAppLaunchDetails, []),
              returnValue: Future<_i18.NotificationAppLaunchDetails?>.value())
          as _i9.Future<_i18.NotificationAppLaunchDetails?>);
  @override
  _i9.Future<void> show(int? id, String? title, String? body,
          _i19.NotificationDetails? notificationDetails, {String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(#show, [id, title, body, notificationDetails],
              {#payload: payload}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(Invocation.method(#cancel, [id], {#tag: tag}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> cancelAll() =>
      (super.noSuchMethod(Invocation.method(#cancelAll, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> schedule(
          int? id,
          String? title,
          String? body,
          DateTime? scheduledDate,
          _i19.NotificationDetails? notificationDetails,
          {String? payload,
          bool? androidAllowWhileIdle = false}) =>
      (super.noSuchMethod(
          Invocation.method(#schedule, [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails
          ], {
            #payload: payload,
            #androidAllowWhileIdle: androidAllowWhileIdle
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> zonedSchedule(
          int? id,
          String? title,
          String? body,
          _i6.TZDateTime? scheduledDate,
          _i19.NotificationDetails? notificationDetails,
          {_i20.UILocalNotificationDateInterpretation?
              uiLocalNotificationDateInterpretation,
          bool? androidAllowWhileIdle,
          String? payload,
          _i21.DateTimeComponents? matchDateTimeComponents}) =>
      (super.noSuchMethod(
          Invocation.method(#zonedSchedule, [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails
          ], {
            #uiLocalNotificationDateInterpretation:
                uiLocalNotificationDateInterpretation,
            #androidAllowWhileIdle: androidAllowWhileIdle,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> periodicallyShow(
          int? id,
          String? title,
          String? body,
          _i18.RepeatInterval? repeatInterval,
          _i19.NotificationDetails? notificationDetails,
          {String? payload,
          bool? androidAllowWhileIdle = false}) =>
      (super.noSuchMethod(
          Invocation.method(#periodicallyShow, [
            id,
            title,
            body,
            repeatInterval,
            notificationDetails
          ], {
            #payload: payload,
            #androidAllowWhileIdle: androidAllowWhileIdle
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> showDailyAtTime(
          int? id,
          String? title,
          String? body,
          _i21.Time? notificationTime,
          _i19.NotificationDetails? notificationDetails,
          {String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(
              #showDailyAtTime,
              [id, title, body, notificationTime, notificationDetails],
              {#payload: payload}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> showWeeklyAtDayAndTime(
          int? id,
          String? title,
          String? body,
          _i21.Day? day,
          _i21.Time? notificationTime,
          _i19.NotificationDetails? notificationDetails,
          {String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(
              #showWeeklyAtDayAndTime,
              [id, title, body, day, notificationTime, notificationDetails],
              {#payload: payload}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<List<_i18.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
              Invocation.method(#pendingNotificationRequests, []),
              returnValue: Future<List<_i18.PendingNotificationRequest>>.value(
                  <_i18.PendingNotificationRequest>[]))
          as _i9.Future<List<_i18.PendingNotificationRequest>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ActivitiesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivitiesBloc extends _i2.Mock implements _i10.ActivitiesBloc {
  MockActivitiesBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.ActivityRepository get activityRepository =>
      (super.noSuchMethod(Invocation.getter(#activityRepository),
          returnValue: _FakeActivityRepository_14()) as _i6.ActivityRepository);
  @override
  _i9.StreamSubscription<dynamic> get pushSubscription =>
      (super.noSuchMethod(Invocation.getter(#pushSubscription),
              returnValue: _FakeStreamSubscription_15<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  set pushSubscription(_i9.StreamSubscription<dynamic>? _pushSubscription) =>
      super.noSuchMethod(
          Invocation.setter(#pushSubscription, _pushSubscription),
          returnValueForMissingStub: null);
  @override
  _i10.SyncBloc get syncBloc =>
      (super.noSuchMethod(Invocation.getter(#syncBloc),
          returnValue: _FakeSyncBloc_16()) as _i10.SyncBloc);
  @override
  _i10.ActivitiesState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeActivitiesState_17()) as _i10.ActivitiesState);
  @override
  _i9.Stream<_i10.ActivitiesState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.ActivitiesState>.empty())
          as _i9.Stream<_i10.ActivitiesState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Stream<_i10.ActivitiesState> mapEventToState(
          _i10.ActivitiesEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i10.ActivitiesState>.empty())
          as _i9.Stream<_i10.ActivitiesState>);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void add(_i10.ActivitiesEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.ActivitiesEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<
      _i22.Transition<_i10.ActivitiesEvent, _i10.ActivitiesState>> transformEvents(
          _i9.Stream<_i10.ActivitiesEvent>? events,
          _i22.TransitionFunction<_i10.ActivitiesEvent, _i10.ActivitiesState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i22.Transition<_i10.ActivitiesEvent, _i10.ActivitiesState>>.empty())
          as _i9.Stream<
              _i22.Transition<_i10.ActivitiesEvent, _i10.ActivitiesState>>);
  @override
  void emit(_i10.ActivitiesState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i22.Transition<_i10.ActivitiesEvent, _i10.ActivitiesState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.ActivitiesEvent, _i10.ActivitiesState>>
      transformTransitions(
              _i9.Stream<_i22.Transition<_i10.ActivitiesEvent, _i10.ActivitiesState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i22.Transition<_i10.ActivitiesEvent, _i10.ActivitiesState>>.empty())
              as _i9.Stream<
                  _i22.Transition<_i10.ActivitiesEvent, _i10.ActivitiesState>>);
  @override
  _i9.StreamSubscription<_i10.ActivitiesState> listen(
          void Function(_i10.ActivitiesState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_15<_i10.ActivitiesState>())
          as _i9.StreamSubscription<_i10.ActivitiesState>);
  @override
  void onChange(_i22.Change<_i10.ActivitiesState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  _i11.ActivityMappingResult deleteThisDayAndForwardToState(
          {_i1.Activity? activity,
          Set<_i1.Activity>? activities,
          DateTime? day}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteThisDayAndForwardToState, [],
                  {#activity: activity, #activities: activities, #day: day}),
              returnValue: _FakeActivityMappingResult_18())
          as _i11.ActivityMappingResult);
  @override
  _i11.ActivityMappingResult deleteOnlyThisDay(
          {_i1.Activity? activity,
          Set<_i1.Activity>? activities,
          DateTime? day}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteOnlyThisDay, [],
                  {#activity: activity, #activities: activities, #day: day}),
              returnValue: _FakeActivityMappingResult_18())
          as _i11.ActivityMappingResult);
  @override
  _i11.ActivityMappingResult updateThisDayAndForward(
          {_i1.Activity? activity,
          Set<_i1.Activity>? activities,
          DateTime? day}) =>
      (super.noSuchMethod(
              Invocation.method(#updateThisDayAndForward, [],
                  {#activity: activity, #activities: activities, #day: day}),
              returnValue: _FakeActivityMappingResult_18())
          as _i11.ActivityMappingResult);
  @override
  _i11.ActivityMappingResult updateOnlyThisDay(
          {_i1.Activity? activity,
          Set<_i1.Activity>? activities,
          DateTime? day}) =>
      (super.noSuchMethod(
              Invocation.method(#updateOnlyThisDay, [],
                  {#activity: activity, #activities: activities, #day: day}),
              returnValue: _FakeActivityMappingResult_18())
          as _i11.ActivityMappingResult);
}

/// A class which mocks [ActivitiesOccasionBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivitiesOccasionBloc extends _i2.Mock
    implements _i10.ActivitiesOccasionBloc {
  MockActivitiesOccasionBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i10.DayActivitiesBloc get dayActivitiesBloc =>
      (super.noSuchMethod(Invocation.getter(#dayActivitiesBloc),
          returnValue: _FakeDayActivitiesBloc_19()) as _i10.DayActivitiesBloc);
  @override
  _i10.ClockBloc get clockBloc =>
      (super.noSuchMethod(Invocation.getter(#clockBloc),
          returnValue: _FakeClockBloc_20()) as _i10.ClockBloc);
  @override
  _i9.StreamSubscription<dynamic> get activitiesSubscription =>
      (super.noSuchMethod(Invocation.getter(#activitiesSubscription),
              returnValue: _FakeStreamSubscription_15<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  set activitiesSubscription(
          _i9.StreamSubscription<dynamic>? _activitiesSubscription) =>
      super.noSuchMethod(
          Invocation.setter(#activitiesSubscription, _activitiesSubscription),
          returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> get clockSubscription =>
      (super.noSuchMethod(Invocation.getter(#clockSubscription),
              returnValue: _FakeStreamSubscription_15<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  set clockSubscription(_i9.StreamSubscription<dynamic>? _clockSubscription) =>
      super.noSuchMethod(
          Invocation.setter(#clockSubscription, _clockSubscription),
          returnValueForMissingStub: null);
  @override
  _i10.ActivitiesOccasionState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeActivitiesOccasionState_21())
          as _i10.ActivitiesOccasionState);
  @override
  _i9.Stream<_i10.ActivitiesOccasionState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.ActivitiesOccasionState>.empty())
          as _i9.Stream<_i10.ActivitiesOccasionState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Stream<_i10.ActivitiesOccasionState> mapEventToState(
          _i10.ActivitiesOccasionEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i10.ActivitiesOccasionState>.empty())
          as _i9.Stream<_i10.ActivitiesOccasionState>);
  @override
  _i10.ActivitiesOccasionLoaded createState(
          {Iterable<_i1.ActivityDay>? activities,
          DateTime? day,
          _i1.Occasion? occasion,
          _i1.ActivityOccasion Function(_i1.ActivityDay)? asActivityOccasion,
          _i1.ActivityOccasion Function(_i1.ActivityDay)? asFulldayOccasion}) =>
      (super.noSuchMethod(
              Invocation.method(#createState, [], {
                #activities: activities,
                #day: day,
                #occasion: occasion,
                #asActivityOccasion: asActivityOccasion,
                #asFulldayOccasion: asFulldayOccasion
              }),
              returnValue: _FakeActivitiesOccasionLoaded_22())
          as _i10.ActivitiesOccasionLoaded);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void add(_i10.ActivitiesOccasionEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.ActivitiesOccasionEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.ActivitiesOccasionEvent, _i10.ActivitiesOccasionState>>
      transformEvents(
              _i9.Stream<_i10.ActivitiesOccasionEvent>? events,
              _i22.TransitionFunction<_i10.ActivitiesOccasionEvent,
                      _i10.ActivitiesOccasionState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i22.Transition<_i10.ActivitiesOccasionEvent, _i10.ActivitiesOccasionState>>.empty())
              as _i9.Stream<_i22.Transition<_i10.ActivitiesOccasionEvent, _i10.ActivitiesOccasionState>>);
  @override
  void emit(_i10.ActivitiesOccasionState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i22.Transition<_i10.ActivitiesOccasionEvent,
                  _i10.ActivitiesOccasionState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.ActivitiesOccasionEvent, _i10.ActivitiesOccasionState>>
      transformTransitions(
              _i9.Stream<_i22.Transition<_i10.ActivitiesOccasionEvent, _i10.ActivitiesOccasionState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i22.Transition<_i10.ActivitiesOccasionEvent, _i10.ActivitiesOccasionState>>.empty())
              as _i9.Stream<
                  _i22.Transition<_i10.ActivitiesOccasionEvent, _i10.ActivitiesOccasionState>>);
  @override
  _i9.StreamSubscription<_i10.ActivitiesOccasionState> listen(
          void Function(_i10.ActivitiesOccasionState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_15<_i10.ActivitiesOccasionState>())
          as _i9.StreamSubscription<_i10.ActivitiesOccasionState>);
  @override
  void onChange(_i22.Change<_i10.ActivitiesOccasionState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SyncBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncBloc extends _i2.Mock implements _i10.SyncBloc {
  MockSyncBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.ActivityRepository get activityRepository =>
      (super.noSuchMethod(Invocation.getter(#activityRepository),
          returnValue: _FakeActivityRepository_14()) as _i6.ActivityRepository);
  @override
  _i6.UserFileRepository get userFileRepository =>
      (super.noSuchMethod(Invocation.getter(#userFileRepository),
          returnValue: _FakeUserFileRepository_23()) as _i6.UserFileRepository);
  @override
  _i6.SortableRepository get sortableRepository =>
      (super.noSuchMethod(Invocation.getter(#sortableRepository),
          returnValue: _FakeSortableRepository_24()) as _i6.SortableRepository);
  @override
  _i6.GenericRepository get genericRepository =>
      (super.noSuchMethod(Invocation.getter(#genericRepository),
          returnValue: _FakeGenericRepository_25()) as _i6.GenericRepository);
  @override
  _i10.SyncDelays get syncDelay =>
      (super.noSuchMethod(Invocation.getter(#syncDelay),
          returnValue: _FakeSyncDelays_26()) as _i10.SyncDelays);
  @override
  _i10.SyncState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeSyncState_27()) as _i10.SyncState);
  @override
  _i9.Stream<_i10.SyncState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.SyncState>.empty())
          as _i9.Stream<_i10.SyncState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i10.SyncEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i10.SyncState> mapEventToState(_i10.SyncEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i10.SyncState>.empty())
          as _i9.Stream<_i10.SyncState>);
  @override
  void onEvent(_i10.SyncEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.SyncEvent, _i10.SyncState>> transformEvents(
          _i9.Stream<_i10.SyncEvent>? events,
          _i22.TransitionFunction<_i10.SyncEvent, _i10.SyncState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i22.Transition<_i10.SyncEvent, _i10.SyncState>>.empty())
          as _i9.Stream<_i22.Transition<_i10.SyncEvent, _i10.SyncState>>);
  @override
  void emit(_i10.SyncState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i22.Transition<_i10.SyncEvent, _i10.SyncState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.SyncEvent, _i10.SyncState>>
      transformTransitions(
              _i9.Stream<_i22.Transition<_i10.SyncEvent, _i10.SyncState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i22.Transition<_i10.SyncEvent, _i10.SyncState>>.empty())
              as _i9.Stream<_i22.Transition<_i10.SyncEvent, _i10.SyncState>>);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.StreamSubscription<_i10.SyncState> listen(
          void Function(_i10.SyncState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_15<_i10.SyncState>())
          as _i9.StreamSubscription<_i10.SyncState>);
  @override
  void onChange(_i22.Change<_i10.SyncState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PushBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushBloc extends _i2.Mock implements _i10.PushBloc {
  MockPushBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i10.PushState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakePushState_28()) as _i10.PushState);
  @override
  _i9.Stream<_i10.PushState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.PushState>.empty())
          as _i9.Stream<_i10.PushState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Stream<_i10.PushState> mapEventToState(_i10.PushEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i10.PushState>.empty())
          as _i9.Stream<_i10.PushState>);
  @override
  void add(_i10.PushEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.PushEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.PushEvent, _i10.PushState>> transformEvents(
          _i9.Stream<_i10.PushEvent>? events,
          _i22.TransitionFunction<_i10.PushEvent, _i10.PushState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i22.Transition<_i10.PushEvent, _i10.PushState>>.empty())
          as _i9.Stream<_i22.Transition<_i10.PushEvent, _i10.PushState>>);
  @override
  void emit(_i10.PushState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i22.Transition<_i10.PushEvent, _i10.PushState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.PushEvent, _i10.PushState>>
      transformTransitions(
              _i9.Stream<_i22.Transition<_i10.PushEvent, _i10.PushState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i22.Transition<_i10.PushEvent, _i10.PushState>>.empty())
              as _i9.Stream<_i22.Transition<_i10.PushEvent, _i10.PushState>>);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.StreamSubscription<_i10.PushState> listen(
          void Function(_i10.PushState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_15<_i10.PushState>())
          as _i9.StreamSubscription<_i10.PushState>);
  @override
  void onChange(_i22.Change<_i10.PushState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GenericBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenericBloc extends _i2.Mock implements _i10.GenericBloc {
  MockGenericBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.GenericRepository get genericRepository =>
      (super.noSuchMethod(Invocation.getter(#genericRepository),
          returnValue: _FakeGenericRepository_25()) as _i6.GenericRepository);
  @override
  _i9.StreamSubscription<dynamic> get pushSubscription =>
      (super.noSuchMethod(Invocation.getter(#pushSubscription),
              returnValue: _FakeStreamSubscription_15<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  set pushSubscription(_i9.StreamSubscription<dynamic>? _pushSubscription) =>
      super.noSuchMethod(
          Invocation.setter(#pushSubscription, _pushSubscription),
          returnValueForMissingStub: null);
  @override
  _i10.SyncBloc get syncBloc =>
      (super.noSuchMethod(Invocation.getter(#syncBloc),
          returnValue: _FakeSyncBloc_16()) as _i10.SyncBloc);
  @override
  _i10.GenericState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeGenericState_29()) as _i10.GenericState);
  @override
  _i9.Stream<_i10.GenericState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.GenericState>.empty())
          as _i9.Stream<_i10.GenericState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Stream<_i10.GenericState> mapEventToState(_i10.GenericEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i10.GenericState>.empty())
          as _i9.Stream<_i10.GenericState>);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void add(_i10.GenericEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.GenericEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.GenericEvent, _i10.GenericState>> transformEvents(
          _i9.Stream<_i10.GenericEvent>? events,
          _i22.TransitionFunction<_i10.GenericEvent, _i10.GenericState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i22.Transition<_i10.GenericEvent, _i10.GenericState>>.empty())
          as _i9.Stream<_i22.Transition<_i10.GenericEvent, _i10.GenericState>>);
  @override
  void emit(_i10.GenericState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i22.Transition<_i10.GenericEvent, _i10.GenericState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.GenericEvent, _i10.GenericState>>
      transformTransitions(
              _i9.Stream<_i22.Transition<_i10.GenericEvent, _i10.GenericState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i22.Transition<_i10.GenericEvent, _i10.GenericState>>.empty())
              as _i9
                  .Stream<_i22.Transition<_i10.GenericEvent, _i10.GenericState>>);
  @override
  _i9.StreamSubscription<_i10.GenericState> listen(
          void Function(_i10.GenericState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_15<_i10.GenericState>())
          as _i9.StreamSubscription<_i10.GenericState>);
  @override
  void onChange(_i22.Change<_i10.GenericState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SortableBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSortableBloc extends _i2.Mock implements _i10.SortableBloc {
  MockSortableBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.SortableRepository get sortableRepository =>
      (super.noSuchMethod(Invocation.getter(#sortableRepository),
          returnValue: _FakeSortableRepository_24()) as _i6.SortableRepository);
  @override
  _i9.StreamSubscription<dynamic> get pushSubscription =>
      (super.noSuchMethod(Invocation.getter(#pushSubscription),
              returnValue: _FakeStreamSubscription_15<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  set pushSubscription(_i9.StreamSubscription<dynamic>? _pushSubscription) =>
      super.noSuchMethod(
          Invocation.setter(#pushSubscription, _pushSubscription),
          returnValueForMissingStub: null);
  @override
  _i10.SyncBloc get syncBloc =>
      (super.noSuchMethod(Invocation.getter(#syncBloc),
          returnValue: _FakeSyncBloc_16()) as _i10.SyncBloc);
  @override
  _i10.SortableState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeSortableState_30()) as _i10.SortableState);
  @override
  _i9.Stream<_i10.SortableState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.SortableState>.empty())
          as _i9.Stream<_i10.SortableState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Stream<_i10.SortableState> mapEventToState(_i10.SortableEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i10.SortableState>.empty())
          as _i9.Stream<_i10.SortableState>);
  @override
  _i9.Future<List<_i1.Sortable<_i1.SortableData>>> getMissingDefaults(
          Iterable<_i1.Sortable<_i1.SortableData>>? sortables) =>
      (super.noSuchMethod(Invocation.method(#getMissingDefaults, [sortables]),
              returnValue: Future<List<_i1.Sortable<_i1.SortableData>>>.value(
                  <_i1.Sortable<_i1.SortableData>>[]))
          as _i9.Future<List<_i1.Sortable<_i1.SortableData>>>);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void add(_i10.SortableEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.SortableEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.SortableEvent, _i10.SortableState>> transformEvents(
          _i9.Stream<_i10.SortableEvent>? events,
          _i22.TransitionFunction<_i10.SortableEvent, _i10.SortableState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i22.Transition<_i10.SortableEvent, _i10.SortableState>>.empty())
          as _i9
              .Stream<_i22.Transition<_i10.SortableEvent, _i10.SortableState>>);
  @override
  void emit(_i10.SortableState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i22.Transition<_i10.SortableEvent, _i10.SortableState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.SortableEvent, _i10.SortableState>>
      transformTransitions(
              _i9.Stream<_i22.Transition<_i10.SortableEvent, _i10.SortableState>>?
                  transitions) =>
          (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue: Stream<
                  _i22.Transition<_i10.SortableEvent, _i10.SortableState>>.empty()) as _i9
              .Stream<_i22.Transition<_i10.SortableEvent, _i10.SortableState>>);
  @override
  _i9.StreamSubscription<_i10.SortableState> listen(
          void Function(_i10.SortableState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_15<_i10.SortableState>())
          as _i9.StreamSubscription<_i10.SortableState>);
  @override
  void onChange(_i22.Change<_i10.SortableState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MemoplannerSettingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemoplannerSettingBloc extends _i2.Mock
    implements _i10.MemoplannerSettingBloc {
  MockMemoplannerSettingBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i10.MemoplannerSettingsState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeMemoplannerSettingsState_31())
          as _i10.MemoplannerSettingsState);
  @override
  _i9.Stream<_i10.MemoplannerSettingsState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.MemoplannerSettingsState>.empty())
          as _i9.Stream<_i10.MemoplannerSettingsState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Stream<_i10.MemoplannerSettingsState> mapEventToState(
          _i10.MemoplannerSettingsEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i10.MemoplannerSettingsState>.empty())
          as _i9.Stream<_i10.MemoplannerSettingsState>);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void add(_i10.MemoplannerSettingsEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.MemoplannerSettingsEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.MemoplannerSettingsEvent, _i10.MemoplannerSettingsState>>
      transformEvents(
              _i9.Stream<_i10.MemoplannerSettingsEvent>? events,
              _i22.TransitionFunction<_i10.MemoplannerSettingsEvent,
                      _i10.MemoplannerSettingsState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i22.Transition<_i10.MemoplannerSettingsEvent, _i10.MemoplannerSettingsState>>.empty())
              as _i9.Stream<_i22.Transition<_i10.MemoplannerSettingsEvent, _i10.MemoplannerSettingsState>>);
  @override
  void emit(_i10.MemoplannerSettingsState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i22.Transition<_i10.MemoplannerSettingsEvent,
                  _i10.MemoplannerSettingsState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.MemoplannerSettingsEvent, _i10.MemoplannerSettingsState>>
      transformTransitions(
              _i9.Stream<_i22.Transition<_i10.MemoplannerSettingsEvent, _i10.MemoplannerSettingsState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i22.Transition<_i10.MemoplannerSettingsEvent, _i10.MemoplannerSettingsState>>.empty())
              as _i9.Stream<
                  _i22.Transition<_i10.MemoplannerSettingsEvent, _i10.MemoplannerSettingsState>>);
  @override
  _i9.StreamSubscription<_i10.MemoplannerSettingsState> listen(
          void Function(_i10.MemoplannerSettingsState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_15<_i10.MemoplannerSettingsState>())
          as _i9.StreamSubscription<_i10.MemoplannerSettingsState>);
  @override
  void onChange(_i22.Change<_i10.MemoplannerSettingsState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TimepillarBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimepillarBloc extends _i2.Mock implements _i10.TimepillarBloc {
  MockTimepillarBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i10.TimepillarState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeTimepillarState_32()) as _i10.TimepillarState);
  @override
  _i9.Stream<_i10.TimepillarState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.TimepillarState>.empty())
          as _i9.Stream<_i10.TimepillarState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Stream<_i10.TimepillarState> mapEventToState(
          _i10.TimepillarEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i10.TimepillarState>.empty())
          as _i9.Stream<_i10.TimepillarState>);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void add(_i10.TimepillarEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.TimepillarEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<
      _i22.Transition<_i10.TimepillarEvent, _i10.TimepillarState>> transformEvents(
          _i9.Stream<_i10.TimepillarEvent>? events,
          _i22.TransitionFunction<_i10.TimepillarEvent, _i10.TimepillarState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i22.Transition<_i10.TimepillarEvent, _i10.TimepillarState>>.empty())
          as _i9.Stream<
              _i22.Transition<_i10.TimepillarEvent, _i10.TimepillarState>>);
  @override
  void emit(_i10.TimepillarState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i22.Transition<_i10.TimepillarEvent, _i10.TimepillarState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.TimepillarEvent, _i10.TimepillarState>>
      transformTransitions(
              _i9.Stream<_i22.Transition<_i10.TimepillarEvent, _i10.TimepillarState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i22.Transition<_i10.TimepillarEvent, _i10.TimepillarState>>.empty())
              as _i9.Stream<
                  _i22.Transition<_i10.TimepillarEvent, _i10.TimepillarState>>);
  @override
  _i9.StreamSubscription<_i10.TimepillarState> listen(
          void Function(_i10.TimepillarState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_15<_i10.TimepillarState>())
          as _i9.StreamSubscription<_i10.TimepillarState>);
  @override
  void onChange(_i22.Change<_i10.TimepillarState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserFileBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserFileBloc extends _i2.Mock implements _i10.UserFileBloc {
  MockUserFileBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.UserFileRepository get userFileRepository =>
      (super.noSuchMethod(Invocation.getter(#userFileRepository),
          returnValue: _FakeUserFileRepository_23()) as _i6.UserFileRepository);
  @override
  _i10.SyncBloc get syncBloc =>
      (super.noSuchMethod(Invocation.getter(#syncBloc),
          returnValue: _FakeSyncBloc_16()) as _i10.SyncBloc);
  @override
  _i7.FileStorage get fileStorage =>
      (super.noSuchMethod(Invocation.getter(#fileStorage),
          returnValue: _FakeFileStorage_11()) as _i7.FileStorage);
  @override
  _i9.StreamSubscription<dynamic> get pushSubscription =>
      (super.noSuchMethod(Invocation.getter(#pushSubscription),
              returnValue: _FakeStreamSubscription_15<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  set pushSubscription(_i9.StreamSubscription<dynamic>? _pushSubscription) =>
      super.noSuchMethod(
          Invocation.setter(#pushSubscription, _pushSubscription),
          returnValueForMissingStub: null);
  @override
  _i10.UserFileState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeUserFileState_33()) as _i10.UserFileState);
  @override
  _i9.Stream<_i10.UserFileState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.UserFileState>.empty())
          as _i9.Stream<_i10.UserFileState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i9.Stream<_i10.UserFileState> mapEventToState(_i10.UserFileEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i10.UserFileState>.empty())
          as _i9.Stream<_i10.UserFileState>);
  @override
  _i1.UserFile generateUserFile(
          String? id, String? path, List<int>? fileBytes) =>
      (super.noSuchMethod(
          Invocation.method(#generateUserFile, [id, path, fileBytes]),
          returnValue: _FakeUserFile_34()) as _i1.UserFile);
  @override
  _i9.Future<_i1.UserFile> handleImage(
          List<int>? originalBytes, String? id, String? path) =>
      (super.noSuchMethod(
              Invocation.method(#handleImage, [originalBytes, id, path]),
              returnValue: Future<_i1.UserFile>.value(_FakeUserFile_34()))
          as _i9.Future<_i1.UserFile>);
  @override
  void add(_i10.UserFileEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.UserFileEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.UserFileEvent, _i10.UserFileState>> transformEvents(
          _i9.Stream<_i10.UserFileEvent>? events,
          _i22.TransitionFunction<_i10.UserFileEvent, _i10.UserFileState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i22.Transition<_i10.UserFileEvent, _i10.UserFileState>>.empty())
          as _i9
              .Stream<_i22.Transition<_i10.UserFileEvent, _i10.UserFileState>>);
  @override
  void emit(_i10.UserFileState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i22.Transition<_i10.UserFileEvent, _i10.UserFileState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<_i22.Transition<_i10.UserFileEvent, _i10.UserFileState>>
      transformTransitions(
              _i9.Stream<_i22.Transition<_i10.UserFileEvent, _i10.UserFileState>>?
                  transitions) =>
          (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue: Stream<
                  _i22.Transition<_i10.UserFileEvent, _i10.UserFileState>>.empty()) as _i9
              .Stream<_i22.Transition<_i10.UserFileEvent, _i10.UserFileState>>);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.StreamSubscription<_i10.UserFileState> listen(
          void Function(_i10.UserFileState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_15<_i10.UserFileState>())
          as _i9.StreamSubscription<_i10.UserFileState>);
  @override
  void onChange(_i22.Change<_i10.UserFileState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ScrollController].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollController extends _i2.Mock implements _i12.ScrollController {
  MockScrollController() {
    _i2.throwOnMissingStub(this);
  }

  @override
  bool get keepScrollOffset =>
      (super.noSuchMethod(Invocation.getter(#keepScrollOffset),
          returnValue: false) as bool);
  @override
  double get initialScrollOffset =>
      (super.noSuchMethod(Invocation.getter(#initialScrollOffset),
          returnValue: 0.0) as double);
  @override
  Iterable<_i12.ScrollPosition> get positions => (super.noSuchMethod(
      Invocation.getter(#positions),
      returnValue: <_i12.ScrollPosition>[]) as Iterable<_i12.ScrollPosition>);
  @override
  bool get hasClients =>
      (super.noSuchMethod(Invocation.getter(#hasClients), returnValue: false)
          as bool);
  @override
  _i12.ScrollPosition get position =>
      (super.noSuchMethod(Invocation.getter(#position),
          returnValue: _FakeScrollPosition_35()) as _i12.ScrollPosition);
  @override
  double get offset =>
      (super.noSuchMethod(Invocation.getter(#offset), returnValue: 0.0)
          as double);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i9.Future<void> animateTo(double? offset,
          {Duration? duration, _i12.Curve? curve}) =>
      (super.noSuchMethod(
          Invocation.method(
              #animateTo, [offset], {#duration: duration, #curve: curve}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void jumpTo(double? value) =>
      super.noSuchMethod(Invocation.method(#jumpTo, [value]),
          returnValueForMissingStub: null);
  @override
  void attach(_i12.ScrollPosition? position) =>
      super.noSuchMethod(Invocation.method(#attach, [position]),
          returnValueForMissingStub: null);
  @override
  void detach(_i12.ScrollPosition? position) =>
      super.noSuchMethod(Invocation.method(#detach, [position]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i12.ScrollPosition createScrollPosition(_i12.ScrollPhysics? physics,
          _i12.ScrollContext? context, _i12.ScrollPosition? oldPosition) =>
      (super.noSuchMethod(
          Invocation.method(
              #createScrollPosition, [physics, context, oldPosition]),
          returnValue: _FakeScrollPosition_35()) as _i12.ScrollPosition);
  @override
  String toString() => super.toString();
  @override
  void debugFillDescription(List<String>? description) => super.noSuchMethod(
      Invocation.method(#debugFillDescription, [description]),
      returnValueForMissingStub: null);
  @override
  void addListener(_i23.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i23.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [MultipartRequestBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultipartRequestBuilder extends _i2.Mock
    implements _i6.MultipartRequestBuilder {
  MockMultipartRequestBuilder() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i5.MultipartRequest generateFileMultipartRequest(
          {Uri? uri, _i24.Uint8List? bytes, String? authToken, String? sha1}) =>
      (super.noSuchMethod(
          Invocation.method(#generateFileMultipartRequest, [],
              {#uri: uri, #bytes: bytes, #authToken: authToken, #sha1: sha1}),
          returnValue: _FakeMultipartRequest_36()) as _i5.MultipartRequest);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MultipartRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultipartRequest extends _i2.Mock implements _i5.MultipartRequest {
  MockMultipartRequest() {
    _i2.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get fields =>
      (super.noSuchMethod(Invocation.getter(#fields),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  List<_i5.MultipartFile> get files =>
      (super.noSuchMethod(Invocation.getter(#files),
          returnValue: <_i5.MultipartFile>[]) as List<_i5.MultipartFile>);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? value) =>
      super.noSuchMethod(Invocation.setter(#contentLength, value),
          returnValueForMissingStub: null);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  Uri get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: _FakeUri_37())
          as Uri);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? value) =>
      super.noSuchMethod(Invocation.setter(#persistentConnection, value),
          returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? value) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, value),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? value) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, value),
          returnValueForMissingStub: null);
  @override
  bool get finalized =>
      (super.noSuchMethod(Invocation.getter(#finalized), returnValue: false)
          as bool);
  @override
  _i5.ByteStream finalize() =>
      (super.noSuchMethod(Invocation.method(#finalize, []),
          returnValue: _FakeByteStream_38()) as _i5.ByteStream);
  @override
  _i9.Future<_i5.StreamedResponse> send() => (super.noSuchMethod(
          Invocation.method(#send, []),
          returnValue:
              Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_39()))
      as _i9.Future<_i5.StreamedResponse>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i2.Mock implements _i8.HttpClient {
  MockHttpClient() {
    _i2.throwOnMissingStub(this);
  }

  @override
  Duration get idleTimeout =>
      (super.noSuchMethod(Invocation.getter(#idleTimeout),
          returnValue: _FakeDuration_40()) as Duration);
  @override
  set idleTimeout(Duration? _idleTimeout) =>
      super.noSuchMethod(Invocation.setter(#idleTimeout, _idleTimeout),
          returnValueForMissingStub: null);
  @override
  set connectionTimeout(Duration? _connectionTimeout) => super.noSuchMethod(
      Invocation.setter(#connectionTimeout, _connectionTimeout),
      returnValueForMissingStub: null);
  @override
  set maxConnectionsPerHost(int? _maxConnectionsPerHost) => super.noSuchMethod(
      Invocation.setter(#maxConnectionsPerHost, _maxConnectionsPerHost),
      returnValueForMissingStub: null);
  @override
  bool get autoUncompress => (super
          .noSuchMethod(Invocation.getter(#autoUncompress), returnValue: false)
      as bool);
  @override
  set autoUncompress(bool? _autoUncompress) =>
      super.noSuchMethod(Invocation.setter(#autoUncompress, _autoUncompress),
          returnValueForMissingStub: null);
  @override
  set userAgent(String? _userAgent) =>
      super.noSuchMethod(Invocation.setter(#userAgent, _userAgent),
          returnValueForMissingStub: null);
  @override
  set authenticate(_i9.Future<bool> Function(Uri, String, String)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticate, f),
          returnValueForMissingStub: null);
  @override
  set findProxy(String Function(Uri)? f) =>
      super.noSuchMethod(Invocation.setter(#findProxy, f),
          returnValueForMissingStub: null);
  @override
  set authenticateProxy(
          _i9.Future<bool> Function(String, int, String, String)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticateProxy, f),
          returnValueForMissingStub: null);
  @override
  set badCertificateCallback(
          bool Function(_i8.X509Certificate, String, int)? callback) =>
      super.noSuchMethod(Invocation.setter(#badCertificateCallback, callback),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i8.HttpClientRequest> open(
          String? method, String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#open, [method, host, port, path]),
              returnValue: Future<_i8.HttpClientRequest>.value(
                  _FakeHttpClientRequest_41()))
          as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> openUrl(String? method, Uri? url) =>
      (super.noSuchMethod(Invocation.method(#openUrl, [method, url]),
              returnValue: Future<_i8.HttpClientRequest>.value(
                  _FakeHttpClientRequest_41()))
          as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> get(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#get, [host, port, path]),
              returnValue: Future<_i8.HttpClientRequest>.value(
                  _FakeHttpClientRequest_41()))
          as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> getUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#getUrl, [url]),
          returnValue:
              Future<_i8.HttpClientRequest>.value(_FakeHttpClientRequest_41()))
      as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> post(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#post, [host, port, path]),
              returnValue: Future<_i8.HttpClientRequest>.value(
                  _FakeHttpClientRequest_41()))
          as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> postUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#postUrl, [url]),
          returnValue:
              Future<_i8.HttpClientRequest>.value(_FakeHttpClientRequest_41()))
      as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> put(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#put, [host, port, path]),
              returnValue: Future<_i8.HttpClientRequest>.value(
                  _FakeHttpClientRequest_41()))
          as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> putUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#putUrl, [url]),
          returnValue:
              Future<_i8.HttpClientRequest>.value(_FakeHttpClientRequest_41()))
      as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> delete(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#delete, [host, port, path]),
              returnValue: Future<_i8.HttpClientRequest>.value(
                  _FakeHttpClientRequest_41()))
          as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> deleteUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#deleteUrl, [url]),
          returnValue:
              Future<_i8.HttpClientRequest>.value(_FakeHttpClientRequest_41()))
      as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> patch(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#patch, [host, port, path]),
              returnValue: Future<_i8.HttpClientRequest>.value(
                  _FakeHttpClientRequest_41()))
          as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> patchUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#patchUrl, [url]),
          returnValue:
              Future<_i8.HttpClientRequest>.value(_FakeHttpClientRequest_41()))
      as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> head(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#head, [host, port, path]),
              returnValue: Future<_i8.HttpClientRequest>.value(
                  _FakeHttpClientRequest_41()))
          as _i9.Future<_i8.HttpClientRequest>);
  @override
  _i9.Future<_i8.HttpClientRequest> headUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#headUrl, [url]),
          returnValue:
              Future<_i8.HttpClientRequest>.value(_FakeHttpClientRequest_41()))
      as _i9.Future<_i8.HttpClientRequest>);
  @override
  void addCredentials(
          Uri? url, String? realm, _i8.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(#addCredentials, [url, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void addProxyCredentials(String? host, int? port, String? realm,
          _i8.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(
              #addProxyCredentials, [host, port, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HttpClientRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientRequest extends _i2.Mock implements _i8.HttpClientRequest {
  MockHttpClientRequest() {
    _i2.throwOnMissingStub(this);
  }

  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
      Invocation.setter(#persistentConnection, _persistentConnection),
      returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? _followRedirects) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, _followRedirects),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? _maxRedirects) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, _maxRedirects),
          returnValueForMissingStub: null);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? _contentLength) =>
      super.noSuchMethod(Invocation.setter(#contentLength, _contentLength),
          returnValueForMissingStub: null);
  @override
  bool get bufferOutput =>
      (super.noSuchMethod(Invocation.getter(#bufferOutput), returnValue: false)
          as bool);
  @override
  set bufferOutput(bool? _bufferOutput) =>
      super.noSuchMethod(Invocation.setter(#bufferOutput, _bufferOutput),
          returnValueForMissingStub: null);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_37())
          as Uri);
  @override
  _i8.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders_42()) as _i8.HttpHeaders);
  @override
  List<_i8.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i8.Cookie>[]) as List<_i8.Cookie>);
  @override
  _i9.Future<_i8.HttpClientResponse> get done => (super.noSuchMethod(
      Invocation.getter(#done),
      returnValue: Future<_i8.HttpClientResponse>.value(
          _FakeHttpClientResponse_43())) as _i9.Future<_i8.HttpClientResponse>);
  @override
  _i13.Encoding get encoding =>
      (super.noSuchMethod(Invocation.getter(#encoding),
          returnValue: _FakeEncoding_44()) as _i13.Encoding);
  @override
  set encoding(_i13.Encoding? _encoding) =>
      super.noSuchMethod(Invocation.setter(#encoding, _encoding),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i8.HttpClientResponse> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<_i8.HttpClientResponse>.value(
          _FakeHttpClientResponse_43())) as _i9.Future<_i8.HttpClientResponse>);
  @override
  void abort([Object? exception, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#abort, [exception, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void add(List<int>? data) =>
      super.noSuchMethod(Invocation.method(#add, [data]),
          returnValueForMissingStub: null);
  @override
  void write(Object? object) =>
      super.noSuchMethod(Invocation.method(#write, [object]),
          returnValueForMissingStub: null);
  @override
  void writeAll(Iterable<dynamic>? objects, [String? separator = r'']) =>
      super.noSuchMethod(Invocation.method(#writeAll, [objects, separator]),
          returnValueForMissingStub: null);
  @override
  void writeln([Object? object = r'']) =>
      super.noSuchMethod(Invocation.method(#writeln, [object]),
          returnValueForMissingStub: null);
  @override
  void writeCharCode(int? charCode) =>
      super.noSuchMethod(Invocation.method(#writeCharCode, [charCode]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<dynamic> addStream(_i9.Stream<List<int>>? stream) =>
      (super.noSuchMethod(Invocation.method(#addStream, [stream]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> flush() =>
      (super.noSuchMethod(Invocation.method(#flush, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponse extends _i2.Mock
    implements _i8.HttpClientResponse {
  MockHttpClientResponse() {
    _i2.throwOnMissingStub(this);
  }

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  String get reasonPhrase =>
      (super.noSuchMethod(Invocation.getter(#reasonPhrase), returnValue: '')
          as String);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  _i8.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(Invocation.getter(#compressionState),
              returnValue: _i8.HttpClientResponseCompressionState.notCompressed)
          as _i8.HttpClientResponseCompressionState);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  List<_i8.RedirectInfo> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i8.RedirectInfo>[]) as List<_i8.RedirectInfo>);
  @override
  _i8.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders_42()) as _i8.HttpHeaders);
  @override
  List<_i8.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i8.Cookie>[]) as List<_i8.Cookie>);
  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);
  @override
  _i9.Future<int> get length => (super.noSuchMethod(Invocation.getter(#length),
      returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<bool> get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<List<int>> get first => (super.noSuchMethod(
      Invocation.getter(#first),
      returnValue: Future<List<int>>.value(<int>[])) as _i9.Future<List<int>>);
  @override
  _i9.Future<List<int>> get last => (super.noSuchMethod(
      Invocation.getter(#last),
      returnValue: Future<List<int>>.value(<int>[])) as _i9.Future<List<int>>);
  @override
  _i9.Future<List<int>> get single => (super.noSuchMethod(
      Invocation.getter(#single),
      returnValue: Future<List<int>>.value(<int>[])) as _i9.Future<List<int>>);
  @override
  _i9.Future<_i8.HttpClientResponse> redirect(
          [String? method, Uri? url, bool? followLoops]) =>
      (super.noSuchMethod(
              Invocation.method(#redirect, [method, url, followLoops]),
              returnValue: Future<_i8.HttpClientResponse>.value(
                  _FakeHttpClientResponse_43()))
          as _i9.Future<_i8.HttpClientResponse>);
  @override
  _i9.Future<_i8.Socket> detachSocket() =>
      (super.noSuchMethod(Invocation.method(#detachSocket, []),
              returnValue: Future<_i8.Socket>.value(_FakeSocket_45()))
          as _i9.Future<_i8.Socket>);
  @override
  String toString() => super.toString();
  @override
  _i9.Stream<List<int>> asBroadcastStream(
          {void Function(_i9.StreamSubscription<List<int>>)? onListen,
          void Function(_i9.StreamSubscription<List<int>>)? onCancel}) =>
      (super.noSuchMethod(
          Invocation.method(#asBroadcastStream, [],
              {#onListen: onListen, #onCancel: onCancel}),
          returnValue: Stream<List<int>>.empty()) as _i9.Stream<List<int>>);
  @override
  _i9.StreamSubscription<List<int>> listen(void Function(List<int>)? onData,
          {Function? onError, void Function()? onDone, bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_15<List<int>>())
          as _i9.StreamSubscription<List<int>>);
  @override
  _i9.Stream<List<int>> where(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: Stream<List<int>>.empty()) as _i9.Stream<List<int>>);
  @override
  _i9.Stream<S> map<S>(S Function(List<int>)? convert) =>
      (super.noSuchMethod(Invocation.method(#map, [convert]),
          returnValue: Stream<S>.empty()) as _i9.Stream<S>);
  @override
  _i9.Stream<E> asyncMap<E>(_i9.FutureOr<E>? Function(List<int>)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncMap, [convert]),
          returnValue: Stream<E>.empty()) as _i9.Stream<E>);
  @override
  _i9.Stream<E> asyncExpand<E>(_i9.Stream<E>? Function(List<int>)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncExpand, [convert]),
          returnValue: Stream<E>.empty()) as _i9.Stream<E>);
  @override
  _i9.Stream<List<int>> handleError(Function? onError,
          {bool Function(dynamic)? test}) =>
      (super.noSuchMethod(
          Invocation.method(#handleError, [onError], {#test: test}),
          returnValue: Stream<List<int>>.empty()) as _i9.Stream<List<int>>);
  @override
  _i9.Stream<S> expand<S>(Iterable<S> Function(List<int>)? convert) =>
      (super.noSuchMethod(Invocation.method(#expand, [convert]),
          returnValue: Stream<S>.empty()) as _i9.Stream<S>);
  @override
  _i9.Future<dynamic> pipe(_i9.StreamConsumer<List<int>>? streamConsumer) =>
      (super.noSuchMethod(Invocation.method(#pipe, [streamConsumer]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Stream<S> transform<S>(
          _i9.StreamTransformer<List<int>, S>? streamTransformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [streamTransformer]),
          returnValue: Stream<S>.empty()) as _i9.Stream<S>);
  @override
  _i9.Future<List<int>> reduce(
          List<int> Function(List<int>, List<int>)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
              returnValue: Future<List<int>>.value(<int>[]))
          as _i9.Future<List<int>>);
  @override
  _i9.Future<S> fold<S>(S? initialValue, S Function(S, List<int>)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: Future<S>.value(null)) as _i9.Future<S>);
  @override
  _i9.Future<String> join([String? separator = r'']) =>
      (super.noSuchMethod(Invocation.method(#join, [separator]),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(Invocation.method(#contains, [needle]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<dynamic> forEach(void Function(List<int>)? action) =>
      (super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<bool> every(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> any(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Stream<R> cast<R>() => (super.noSuchMethod(Invocation.method(#cast, []),
      returnValue: Stream<R>.empty()) as _i9.Stream<R>);
  @override
  _i9.Future<List<List<int>>> toList() =>
      (super.noSuchMethod(Invocation.method(#toList, []),
              returnValue: Future<List<List<int>>>.value(<List<int>>[]))
          as _i9.Future<List<List<int>>>);
  @override
  _i9.Future<Set<List<int>>> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
              returnValue: Future<Set<List<int>>>.value(<List<int>>{}))
          as _i9.Future<Set<List<int>>>);
  @override
  _i9.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#drain, [futureValue]),
          returnValue: Future<E>.value(null)) as _i9.Future<E>);
  @override
  _i9.Stream<List<int>> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
          returnValue: Stream<List<int>>.empty()) as _i9.Stream<List<int>>);
  @override
  _i9.Stream<List<int>> takeWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: Stream<List<int>>.empty()) as _i9.Stream<List<int>>);
  @override
  _i9.Stream<List<int>> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
          returnValue: Stream<List<int>>.empty()) as _i9.Stream<List<int>>);
  @override
  _i9.Stream<List<int>> skipWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: Stream<List<int>>.empty()) as _i9.Stream<List<int>>);
  @override
  _i9.Stream<List<int>> distinct(
          [bool Function(List<int>, List<int>)? equals]) =>
      (super.noSuchMethod(Invocation.method(#distinct, [equals]),
          returnValue: Stream<List<int>>.empty()) as _i9.Stream<List<int>>);
  @override
  _i9.Future<List<int>> firstWhere(bool Function(List<int>)? test,
          {List<int> Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#firstWhere, [test], {#orElse: orElse}),
              returnValue: Future<List<int>>.value(<int>[]))
          as _i9.Future<List<int>>);
  @override
  _i9.Future<List<int>> lastWhere(bool Function(List<int>)? test,
          {List<int> Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#lastWhere, [test], {#orElse: orElse}),
              returnValue: Future<List<int>>.value(<int>[]))
          as _i9.Future<List<int>>);
  @override
  _i9.Future<List<int>> singleWhere(bool Function(List<int>)? test,
          {List<int> Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#singleWhere, [test], {#orElse: orElse}),
              returnValue: Future<List<int>>.value(<int>[]))
          as _i9.Future<List<int>>);
  @override
  _i9.Future<List<int>> elementAt(int? index) => (super.noSuchMethod(
      Invocation.method(#elementAt, [index]),
      returnValue: Future<List<int>>.value(<int>[])) as _i9.Future<List<int>>);
  @override
  _i9.Stream<List<int>> timeout(Duration? timeLimit,
          {void Function(_i9.EventSink<List<int>>)? onTimeout}) =>
      (super.noSuchMethod(
          Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
          returnValue: Stream<List<int>>.empty()) as _i9.Stream<List<int>>);
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaders extends _i2.Mock implements _i8.HttpHeaders {
  MockHttpHeaders() {
    _i2.throwOnMissingStub(this);
  }

  @override
  set date(DateTime? _date) =>
      super.noSuchMethod(Invocation.setter(#date, _date),
          returnValueForMissingStub: null);
  @override
  set expires(DateTime? _expires) =>
      super.noSuchMethod(Invocation.setter(#expires, _expires),
          returnValueForMissingStub: null);
  @override
  set ifModifiedSince(DateTime? _ifModifiedSince) =>
      super.noSuchMethod(Invocation.setter(#ifModifiedSince, _ifModifiedSince),
          returnValueForMissingStub: null);
  @override
  set host(String? _host) => super.noSuchMethod(Invocation.setter(#host, _host),
      returnValueForMissingStub: null);
  @override
  set port(int? _port) => super.noSuchMethod(Invocation.setter(#port, _port),
      returnValueForMissingStub: null);
  @override
  set contentType(_i8.ContentType? _contentType) =>
      super.noSuchMethod(Invocation.setter(#contentType, _contentType),
          returnValueForMissingStub: null);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? _contentLength) =>
      super.noSuchMethod(Invocation.setter(#contentLength, _contentLength),
          returnValueForMissingStub: null);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
      Invocation.setter(#persistentConnection, _persistentConnection),
      returnValueForMissingStub: null);
  @override
  bool get chunkedTransferEncoding =>
      (super.noSuchMethod(Invocation.getter(#chunkedTransferEncoding),
          returnValue: false) as bool);
  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
          Invocation.setter(#chunkedTransferEncoding, _chunkedTransferEncoding),
          returnValueForMissingStub: null);
  @override
  List<String>? operator [](String? name) =>
      (super.noSuchMethod(Invocation.method(#[], [name])) as List<String>?);
  @override
  String? value(String? name) =>
      (super.noSuchMethod(Invocation.method(#value, [name])) as String?);
  @override
  void add(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #add, [name, value], {#preserveHeaderCase: preserveHeaderCase}),
          returnValueForMissingStub: null);
  @override
  void set(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #set, [name, value], {#preserveHeaderCase: preserveHeaderCase}),
          returnValueForMissingStub: null);
  @override
  void remove(String? name, Object? value) =>
      super.noSuchMethod(Invocation.method(#remove, [name, value]),
          returnValueForMissingStub: null);
  @override
  void removeAll(String? name) =>
      super.noSuchMethod(Invocation.method(#removeAll, [name]),
          returnValueForMissingStub: null);
  @override
  void forEach(void Function(String, List<String>)? action) =>
      super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValueForMissingStub: null);
  @override
  void noFolding(String? name) =>
      super.noSuchMethod(Invocation.method(#noFolding, [name]),
          returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ScrollPosition].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollPosition extends _i2.Mock implements _i12.ScrollPosition {
  MockScrollPosition() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i12.ScrollPhysics get physics =>
      (super.noSuchMethod(Invocation.getter(#physics),
          returnValue: _FakeScrollPhysics_46()) as _i12.ScrollPhysics);
  @override
  _i12.ScrollContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeScrollContext_47()) as _i12.ScrollContext);
  @override
  bool get keepScrollOffset =>
      (super.noSuchMethod(Invocation.getter(#keepScrollOffset),
          returnValue: false) as bool);
  @override
  _i12.ValueNotifier<bool> get isScrollingNotifier => (super.noSuchMethod(
      Invocation.getter(#isScrollingNotifier),
      returnValue: _FakeValueNotifier_48<bool>()) as _i12.ValueNotifier<bool>);
  @override
  double get minScrollExtent =>
      (super.noSuchMethod(Invocation.getter(#minScrollExtent), returnValue: 0.0)
          as double);
  @override
  double get maxScrollExtent =>
      (super.noSuchMethod(Invocation.getter(#maxScrollExtent), returnValue: 0.0)
          as double);
  @override
  bool get hasContentDimensions =>
      (super.noSuchMethod(Invocation.getter(#hasContentDimensions),
          returnValue: false) as bool);
  @override
  double get pixels =>
      (super.noSuchMethod(Invocation.getter(#pixels), returnValue: 0.0)
          as double);
  @override
  bool get hasPixels =>
      (super.noSuchMethod(Invocation.getter(#hasPixels), returnValue: false)
          as bool);
  @override
  double get viewportDimension => (super
          .noSuchMethod(Invocation.getter(#viewportDimension), returnValue: 0.0)
      as double);
  @override
  bool get hasViewportDimension =>
      (super.noSuchMethod(Invocation.getter(#hasViewportDimension),
          returnValue: false) as bool);
  @override
  bool get haveDimensions => (super
          .noSuchMethod(Invocation.getter(#haveDimensions), returnValue: false)
      as bool);
  @override
  bool get allowImplicitScrolling =>
      (super.noSuchMethod(Invocation.getter(#allowImplicitScrolling),
          returnValue: false) as bool);
  @override
  _i25.ScrollDirection get userScrollDirection =>
      (super.noSuchMethod(Invocation.getter(#userScrollDirection),
          returnValue: _i25.ScrollDirection.idle) as _i25.ScrollDirection);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i12.AxisDirection get axisDirection =>
      (super.noSuchMethod(Invocation.getter(#axisDirection),
          returnValue: _i12.AxisDirection.up) as _i12.AxisDirection);
  @override
  _i12.Axis get axis => (super.noSuchMethod(Invocation.getter(#axis),
      returnValue: _i12.Axis.horizontal) as _i12.Axis);
  @override
  bool get outOfRange =>
      (super.noSuchMethod(Invocation.getter(#outOfRange), returnValue: false)
          as bool);
  @override
  bool get atEdge =>
      (super.noSuchMethod(Invocation.getter(#atEdge), returnValue: false)
          as bool);
  @override
  double get extentBefore =>
      (super.noSuchMethod(Invocation.getter(#extentBefore), returnValue: 0.0)
          as double);
  @override
  double get extentInside =>
      (super.noSuchMethod(Invocation.getter(#extentInside), returnValue: 0.0)
          as double);
  @override
  double get extentAfter =>
      (super.noSuchMethod(Invocation.getter(#extentAfter), returnValue: 0.0)
          as double);
  @override
  void absorb(_i12.ScrollPosition? other) =>
      super.noSuchMethod(Invocation.method(#absorb, [other]),
          returnValueForMissingStub: null);
  @override
  double setPixels(double? newPixels) =>
      (super.noSuchMethod(Invocation.method(#setPixels, [newPixels]),
          returnValue: 0.0) as double);
  @override
  void correctPixels(double? value) =>
      super.noSuchMethod(Invocation.method(#correctPixels, [value]),
          returnValueForMissingStub: null);
  @override
  void correctBy(double? correction) =>
      super.noSuchMethod(Invocation.method(#correctBy, [correction]),
          returnValueForMissingStub: null);
  @override
  void forcePixels(double? value) =>
      super.noSuchMethod(Invocation.method(#forcePixels, [value]),
          returnValueForMissingStub: null);
  @override
  void saveScrollOffset() =>
      super.noSuchMethod(Invocation.method(#saveScrollOffset, []),
          returnValueForMissingStub: null);
  @override
  void restoreScrollOffset() =>
      super.noSuchMethod(Invocation.method(#restoreScrollOffset, []),
          returnValueForMissingStub: null);
  @override
  void restoreOffset(double? offset, {bool? initialRestore = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #restoreOffset, [offset], {#initialRestore: initialRestore}),
          returnValueForMissingStub: null);
  @override
  void saveOffset() => super.noSuchMethod(Invocation.method(#saveOffset, []),
      returnValueForMissingStub: null);
  @override
  double applyBoundaryConditions(double? value) =>
      (super.noSuchMethod(Invocation.method(#applyBoundaryConditions, [value]),
          returnValue: 0.0) as double);
  @override
  bool applyViewportDimension(double? viewportDimension) => (super.noSuchMethod(
      Invocation.method(#applyViewportDimension, [viewportDimension]),
      returnValue: false) as bool);
  @override
  bool applyContentDimensions(
          double? minScrollExtent, double? maxScrollExtent) =>
      (super.noSuchMethod(
          Invocation.method(
              #applyContentDimensions, [minScrollExtent, maxScrollExtent]),
          returnValue: false) as bool);
  @override
  bool correctForNewDimensions(
          _i12.ScrollMetrics? oldPosition, _i12.ScrollMetrics? newPosition) =>
      (super.noSuchMethod(
          Invocation.method(
              #correctForNewDimensions, [oldPosition, newPosition]),
          returnValue: false) as bool);
  @override
  void applyNewDimensions() =>
      super.noSuchMethod(Invocation.method(#applyNewDimensions, []),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> ensureVisible(_i12.RenderObject? object,
          {double? alignment = 0.0,
          Duration? duration = const Duration(seconds: 0),
          _i12.Curve? curve = Curves.ease,
          _i12.ScrollPositionAlignmentPolicy? alignmentPolicy =
              _i12.ScrollPositionAlignmentPolicy.explicit,
          _i12.RenderObject? targetRenderObject}) =>
      (super.noSuchMethod(
          Invocation.method(#ensureVisible, [
            object
          ], {
            #alignment: alignment,
            #duration: duration,
            #curve: curve,
            #alignmentPolicy: alignmentPolicy,
            #targetRenderObject: targetRenderObject
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> animateTo(double? to,
          {Duration? duration, _i12.Curve? curve}) =>
      (super.noSuchMethod(
          Invocation.method(
              #animateTo, [to], {#duration: duration, #curve: curve}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void jumpTo(double? value) =>
      super.noSuchMethod(Invocation.method(#jumpTo, [value]),
          returnValueForMissingStub: null);
  @override
  void pointerScroll(double? delta) =>
      super.noSuchMethod(Invocation.method(#pointerScroll, [delta]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> moveTo(double? to,
          {Duration? duration, _i12.Curve? curve, bool? clamp = true}) =>
      (super.noSuchMethod(
          Invocation.method(#moveTo, [to],
              {#duration: duration, #curve: curve, #clamp: clamp}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void jumpToWithoutSettling(double? value) =>
      super.noSuchMethod(Invocation.method(#jumpToWithoutSettling, [value]),
          returnValueForMissingStub: null);
  @override
  _i12.ScrollHoldController hold(_i23.VoidCallback? holdCancelCallback) =>
      (super.noSuchMethod(Invocation.method(#hold, [holdCancelCallback]),
              returnValue: _FakeScrollHoldController_49())
          as _i12.ScrollHoldController);
  @override
  _i14.Drag drag(_i12.DragStartDetails? details,
          _i23.VoidCallback? dragCancelCallback) =>
      (super.noSuchMethod(
          Invocation.method(#drag, [details, dragCancelCallback]),
          returnValue: _FakeDrag_50()) as _i14.Drag);
  @override
  void beginActivity(_i12.ScrollActivity? newActivity) =>
      super.noSuchMethod(Invocation.method(#beginActivity, [newActivity]),
          returnValueForMissingStub: null);
  @override
  void didStartScroll() =>
      super.noSuchMethod(Invocation.method(#didStartScroll, []),
          returnValueForMissingStub: null);
  @override
  void didUpdateScrollPositionBy(double? delta) =>
      super.noSuchMethod(Invocation.method(#didUpdateScrollPositionBy, [delta]),
          returnValueForMissingStub: null);
  @override
  void didEndScroll() =>
      super.noSuchMethod(Invocation.method(#didEndScroll, []),
          returnValueForMissingStub: null);
  @override
  void didOverscrollBy(double? value) =>
      super.noSuchMethod(Invocation.method(#didOverscrollBy, [value]),
          returnValueForMissingStub: null);
  @override
  void didUpdateScrollDirection(_i25.ScrollDirection? direction) => super
      .noSuchMethod(Invocation.method(#didUpdateScrollDirection, [direction]),
          returnValueForMissingStub: null);
  @override
  bool recommendDeferredLoading(_i12.BuildContext? context) => (super
      .noSuchMethod(Invocation.method(#recommendDeferredLoading, [context]),
          returnValue: false) as bool);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  void debugFillDescription(List<String>? description) => super.noSuchMethod(
      Invocation.method(#debugFillDescription, [description]),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void addListener(_i23.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i23.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i12.ScrollMetrics copyWith(
          {double? minScrollExtent,
          double? maxScrollExtent,
          double? pixels,
          double? viewportDimension,
          _i12.AxisDirection? axisDirection}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #minScrollExtent: minScrollExtent,
            #maxScrollExtent: maxScrollExtent,
            #pixels: pixels,
            #viewportDimension: viewportDimension,
            #axisDirection: axisDirection
          }),
          returnValue: _FakeScrollMetrics_51()) as _i12.ScrollMetrics);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i2.Mock implements _i3.Database {
  MockDatabase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<T> transaction<T>(_i9.Future<T> Function(_i3.Transaction)? action,
          {bool? exclusive}) =>
      (super.noSuchMethod(
          Invocation.method(#transaction, [action], {#exclusive: exclusive}),
          returnValue: Future<T>.value(null)) as _i9.Future<T>);
  @override
  _i9.Future<int> getVersion() =>
      (super.noSuchMethod(Invocation.method(#getVersion, []),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<void> setVersion(int? version) =>
      (super.noSuchMethod(Invocation.method(#setVersion, [version]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<T> devInvokeMethod<T>(String? method, [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#devInvokeMethod, [method, arguments]),
          returnValue: Future<T>.value(null)) as _i9.Future<T>);
  @override
  _i9.Future<T> devInvokeSqlMethod<T>(String? method, String? sql,
          [List<Object?>? arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#devInvokeSqlMethod, [method, sql, arguments]),
          returnValue: Future<T>.value(null)) as _i9.Future<T>);
  @override
  String toString() => super.toString();
  @override
  _i9.Future<void> execute(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#execute, [sql, arguments]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<int> rawInsert(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawInsert, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> insert(String? table, Map<String, Object?>? values,
          {String? nullColumnHack, _i3.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#insert, [
            table,
            values
          ], {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<List<Map<String, Object?>>> query(String? table,
          {bool? distinct,
          List<String>? columns,
          String? where,
          List<Object?>? whereArgs,
          String? groupBy,
          String? having,
          String? orderBy,
          int? limit,
          int? offset}) =>
      (super.noSuchMethod(
              Invocation.method(#query, [
                table
              ], {
                #distinct: distinct,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #groupBy: groupBy,
                #having: having,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset
              }),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i9.Future<List<Map<String, Object?>>>);
  @override
  _i9.Future<List<Map<String, Object?>>> rawQuery(String? sql,
          [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawQuery, [sql, arguments]),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i9.Future<List<Map<String, Object?>>>);
  @override
  _i9.Future<int> rawUpdate(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawUpdate, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> update(String? table, Map<String, Object?>? values,
          {String? where,
          List<Object?>? whereArgs,
          _i3.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [
            table,
            values
          ], {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> rawDelete(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawDelete, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> delete(String? table,
          {String? where, List<Object?>? whereArgs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i3.Batch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeBatch_52()) as _i3.Batch);
}

/// A class which mocks [BaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseClient extends _i2.Mock implements _i5.BaseClient {
  MockBaseClient() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i5.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_53()))
          as _i9.Future<_i5.Response>);
  @override
  _i9.Future<_i5.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_53()))
          as _i9.Future<_i5.Response>);
  @override
  _i9.Future<_i5.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i13.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_53()))
          as _i9.Future<_i5.Response>);
  @override
  _i9.Future<_i5.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i13.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_53()))
          as _i9.Future<_i5.Response>);
  @override
  _i9.Future<_i5.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i13.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_53()))
          as _i9.Future<_i5.Response>);
  @override
  _i9.Future<_i5.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i13.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_53()))
          as _i9.Future<_i5.Response>);
  @override
  _i9.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i24.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i24.Uint8List>.value(_i24.Uint8List(0)))
          as _i9.Future<_i24.Uint8List>);
  @override
  _i9.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
          returnValue: Future<_i5.StreamedResponse>.value(
              _FakeStreamedResponse_39())) as _i9.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SettingsDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsDb extends _i2.Mock implements _i3.SettingsDb {
  MockSettingsDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i15.SharedPreferences get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: _FakeSharedPreferences_54()) as _i15.SharedPreferences);
  @override
  String get language =>
      (super.noSuchMethod(Invocation.getter(#language), returnValue: '')
          as String);
  @override
  bool get alwaysUse24HourFormat =>
      (super.noSuchMethod(Invocation.getter(#alwaysUse24HourFormat),
          returnValue: false) as bool);
  @override
  bool get textToSpeech =>
      (super.noSuchMethod(Invocation.getter(#textToSpeech), returnValue: false)
          as bool);
  @override
  bool get rightCategoryExpanded =>
      (super.noSuchMethod(Invocation.getter(#rightCategoryExpanded),
          returnValue: false) as bool);
  @override
  bool get leftCategoryExpanded =>
      (super.noSuchMethod(Invocation.getter(#leftCategoryExpanded),
          returnValue: false) as bool);
  @override
  _i9.Future<dynamic> setLanguage(String? language) =>
      (super.noSuchMethod(Invocation.method(#setLanguage, [language]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> setAlwaysUse24HourFormat(bool? alwaysUse24HourFormat) =>
      (super.noSuchMethod(
          Invocation.method(#setAlwaysUse24HourFormat, [alwaysUse24HourFormat]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> setTextToSpeech(bool? textToSpeech) =>
      (super.noSuchMethod(Invocation.method(#setTextToSpeech, [textToSpeech]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> setRightCategoryExpanded(bool? expanded) => (super
      .noSuchMethod(Invocation.method(#setRightCategoryExpanded, [expanded]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> setLeftCategoryExpanded(bool? expanded) => (super
      .noSuchMethod(Invocation.method(#setLeftCategoryExpanded, [expanded]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ActivityDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityDb extends _i2.Mock implements _i3.ActivityDb {
  MockActivityDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i3.DbMapTo<_i1.Activity> get convertToDataModel =>
      (super.noSuchMethod(Invocation.getter(#convertToDataModel),
          returnValue: (Map<String, dynamic> map) =>
              _FakeDbModel_2<_i1.Activity>()) as _i3.DbMapTo<_i1.Activity>);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  _i3.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_55()) as _i3.Database);
  @override
  String get GET_ALL_DIRTY =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_DIRTY), returnValue: '')
          as String);
  @override
  String get GET_BY_ID_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_BY_ID_SQL), returnValue: '')
          as String);
  @override
  String get GET_ALL_SQL_NON_DELETED =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL_NON_DELETED),
          returnValue: '') as String);
  @override
  String get GET_ALL_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL), returnValue: '')
          as String);
  @override
  String get MAX_REVISION_SQL =>
      (super.noSuchMethod(Invocation.getter(#MAX_REVISION_SQL), returnValue: '')
          as String);
  @override
  _i9.Future<dynamic> insert(Iterable<_i1.DbModel<_i1.Activity>>? dataModels) =>
      (super.noSuchMethod(Invocation.method(#insert, [dataModels]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<Iterable<_i1.DbModel<_i1.Activity>>> getAllDirty() =>
      (super.noSuchMethod(Invocation.method(#getAllDirty, []),
              returnValue: Future<Iterable<_i1.DbModel<_i1.Activity>>>.value(
                  <_i1.DbModel<_i1.Activity>>[]))
          as _i9.Future<Iterable<_i1.DbModel<_i1.Activity>>>);
  @override
  _i9.Future<_i1.DbModel<_i1.Activity>?> getById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue: Future<_i1.DbModel<_i1.Activity>?>.value())
          as _i9.Future<_i1.DbModel<_i1.Activity>?>);
  @override
  _i9.Future<Iterable<_i1.Activity>> getAll() => (super.noSuchMethod(
          Invocation.method(#getAll, []),
          returnValue: Future<Iterable<_i1.Activity>>.value(<_i1.Activity>[]))
      as _i9.Future<Iterable<_i1.Activity>>);
  @override
  _i9.Future<Iterable<_i1.Activity>> getAllNonDeleted() => (super.noSuchMethod(
          Invocation.method(#getAllNonDeleted, []),
          returnValue: Future<Iterable<_i1.Activity>>.value(<_i1.Activity>[]))
      as _i9.Future<Iterable<_i1.Activity>>);
  @override
  _i9.Future<int> getLastRevision() =>
      (super.noSuchMethod(Invocation.method(#getLastRevision, []),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<bool> insertAndAddDirty(Iterable<_i1.Activity>? data) =>
      (super.noSuchMethod(Invocation.method(#insertAndAddDirty, [data]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SortableDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockSortableDb extends _i2.Mock implements _i3.SortableDb {
  MockSortableDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i3.DbMapTo<_i1.Sortable<_i1.SortableData>> get convertToDataModel =>
      (super.noSuchMethod(Invocation.getter(#convertToDataModel),
              returnValue: (Map<String, dynamic> map) =>
                  _FakeDbModel_2<_i1.Sortable<_i1.SortableData>>())
          as _i3.DbMapTo<_i1.Sortable<_i1.SortableData>>);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  _i3.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_55()) as _i3.Database);
  @override
  String get GET_ALL_DIRTY =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_DIRTY), returnValue: '')
          as String);
  @override
  String get GET_BY_ID_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_BY_ID_SQL), returnValue: '')
          as String);
  @override
  String get GET_ALL_SQL_NON_DELETED =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL_NON_DELETED),
          returnValue: '') as String);
  @override
  String get GET_ALL_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL), returnValue: '')
          as String);
  @override
  String get MAX_REVISION_SQL =>
      (super.noSuchMethod(Invocation.getter(#MAX_REVISION_SQL), returnValue: '')
          as String);
  @override
  _i9.Future<dynamic> insert(
          Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>? dataModels) =>
      (super.noSuchMethod(Invocation.method(#insert, [dataModels]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>
      getAllDirty() => (super.noSuchMethod(Invocation.method(#getAllDirty, []),
          returnValue: Future<
                  Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>.value(
              <_i1.DbModel<_i1.Sortable<_i1.SortableData>>>[])) as _i9
          .Future<Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>);
  @override
  _i9.Future<_i1.DbModel<_i1.Sortable<_i1.SortableData>>?> getById(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue:
                  Future<_i1.DbModel<_i1.Sortable<_i1.SortableData>>?>.value())
          as _i9.Future<_i1.DbModel<_i1.Sortable<_i1.SortableData>>?>);
  @override
  _i9.Future<Iterable<_i1.Sortable<_i1.SortableData>>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
          returnValue: Future<Iterable<_i1.Sortable<_i1.SortableData>>>.value(
              <_i1.Sortable<_i1.SortableData>>[])) as _i9
          .Future<Iterable<_i1.Sortable<_i1.SortableData>>>);
  @override
  _i9.Future<Iterable<_i1.Sortable<_i1.SortableData>>> getAllNonDeleted() =>
      (super.noSuchMethod(Invocation.method(#getAllNonDeleted, []),
          returnValue: Future<Iterable<_i1.Sortable<_i1.SortableData>>>.value(
              <_i1.Sortable<_i1.SortableData>>[])) as _i9
          .Future<Iterable<_i1.Sortable<_i1.SortableData>>>);
  @override
  _i9.Future<int> getLastRevision() =>
      (super.noSuchMethod(Invocation.method(#getLastRevision, []),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<bool> insertAndAddDirty(
          Iterable<_i1.Sortable<_i1.SortableData>>? data) =>
      (super.noSuchMethod(Invocation.method(#insertAndAddDirty, [data]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserFileDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserFileDb extends _i2.Mock implements _i3.UserFileDb {
  MockUserFileDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  String get GET_ALL_WITH_MISSING_FILES =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_WITH_MISSING_FILES),
          returnValue: '') as String);
  @override
  String get GET_ALL_WITH_LOADED_FILES =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_WITH_LOADED_FILES),
          returnValue: '') as String);
  @override
  String get SET_FILE_LOADED =>
      (super.noSuchMethod(Invocation.getter(#SET_FILE_LOADED), returnValue: '')
          as String);
  @override
  _i3.DbMapTo<_i1.UserFile> get convertToDataModel =>
      (super.noSuchMethod(Invocation.getter(#convertToDataModel),
          returnValue: (Map<String, dynamic> map) =>
              _FakeDbModel_2<_i1.UserFile>()) as _i3.DbMapTo<_i1.UserFile>);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  _i3.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_55()) as _i3.Database);
  @override
  String get GET_ALL_DIRTY =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_DIRTY), returnValue: '')
          as String);
  @override
  String get GET_BY_ID_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_BY_ID_SQL), returnValue: '')
          as String);
  @override
  String get GET_ALL_SQL_NON_DELETED =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL_NON_DELETED),
          returnValue: '') as String);
  @override
  String get GET_ALL_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL), returnValue: '')
          as String);
  @override
  String get MAX_REVISION_SQL =>
      (super.noSuchMethod(Invocation.getter(#MAX_REVISION_SQL), returnValue: '')
          as String);
  @override
  String missingFilesWithLimit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#missingFilesWithLimit, [limit]),
          returnValue: '') as String);
  @override
  _i9.Future<Iterable<_i1.UserFile>> getMissingFiles({int? limit}) => (super
      .noSuchMethod(Invocation.method(#getMissingFiles, [], {#limit: limit}),
          returnValue:
              Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[])) as _i9
      .Future<Iterable<_i1.UserFile>>);
  @override
  _i9.Future<Iterable<_i1.UserFile>> getAllLoadedFiles() => (super.noSuchMethod(
          Invocation.method(#getAllLoadedFiles, []),
          returnValue: Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
      as _i9.Future<Iterable<_i1.UserFile>>);
  @override
  _i9.Future<dynamic> setFileLoadedForId(String? id) =>
      (super.noSuchMethod(Invocation.method(#setFileLoadedForId, [id]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> insert(Iterable<_i1.DbModel<_i1.UserFile>>? dataModels) =>
      (super.noSuchMethod(Invocation.method(#insert, [dataModels]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<Iterable<_i1.DbModel<_i1.UserFile>>> getAllDirty() =>
      (super.noSuchMethod(Invocation.method(#getAllDirty, []),
              returnValue: Future<Iterable<_i1.DbModel<_i1.UserFile>>>.value(
                  <_i1.DbModel<_i1.UserFile>>[]))
          as _i9.Future<Iterable<_i1.DbModel<_i1.UserFile>>>);
  @override
  _i9.Future<_i1.DbModel<_i1.UserFile>?> getById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue: Future<_i1.DbModel<_i1.UserFile>?>.value())
          as _i9.Future<_i1.DbModel<_i1.UserFile>?>);
  @override
  _i9.Future<Iterable<_i1.UserFile>> getAll() => (super.noSuchMethod(
          Invocation.method(#getAll, []),
          returnValue: Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
      as _i9.Future<Iterable<_i1.UserFile>>);
  @override
  _i9.Future<Iterable<_i1.UserFile>> getAllNonDeleted() => (super.noSuchMethod(
          Invocation.method(#getAllNonDeleted, []),
          returnValue: Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
      as _i9.Future<Iterable<_i1.UserFile>>);
  @override
  _i9.Future<int> getLastRevision() =>
      (super.noSuchMethod(Invocation.method(#getLastRevision, []),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<bool> insertAndAddDirty(Iterable<_i1.UserFile>? data) =>
      (super.noSuchMethod(Invocation.method(#insertAndAddDirty, [data]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GenericDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenericDb extends _i2.Mock implements _i3.GenericDb {
  MockGenericDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i3.DbMapTo<_i1.Generic<_i1.GenericData>> get convertToDataModel =>
      (super.noSuchMethod(Invocation.getter(#convertToDataModel),
              returnValue: (Map<String, dynamic> map) =>
                  _FakeDbModel_2<_i1.Generic<_i1.GenericData>>())
          as _i3.DbMapTo<_i1.Generic<_i1.GenericData>>);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  _i3.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_55()) as _i3.Database);
  @override
  String get GET_ALL_DIRTY =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_DIRTY), returnValue: '')
          as String);
  @override
  String get GET_BY_ID_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_BY_ID_SQL), returnValue: '')
          as String);
  @override
  String get GET_ALL_SQL_NON_DELETED =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL_NON_DELETED),
          returnValue: '') as String);
  @override
  String get GET_ALL_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL), returnValue: '')
          as String);
  @override
  String get MAX_REVISION_SQL =>
      (super.noSuchMethod(Invocation.getter(#MAX_REVISION_SQL), returnValue: '')
          as String);
  @override
  _i9.Future<Iterable<_i1.Generic<_i1.GenericData>>>
      getAllNonDeletedMaxRevision() => (super.noSuchMethod(
              Invocation.method(#getAllNonDeletedMaxRevision, []),
              returnValue: Future<Iterable<_i1.Generic<_i1.GenericData>>>.value(
                  <_i1.Generic<_i1.GenericData>>[]))
          as _i9.Future<Iterable<_i1.Generic<_i1.GenericData>>>);
  @override
  _i9.Future<dynamic> insert(
          Iterable<_i1.DbModel<_i1.Generic<_i1.GenericData>>>? dataModels) =>
      (super.noSuchMethod(Invocation.method(#insert, [dataModels]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<Iterable<_i1.DbModel<_i1.Generic<_i1.GenericData>>>>
      getAllDirty() => (super.noSuchMethod(Invocation.method(#getAllDirty, []),
          returnValue:
              Future<Iterable<_i1.DbModel<_i1.Generic<_i1.GenericData>>>>.value(
                  <_i1.DbModel<_i1.Generic<_i1.GenericData>>>[])) as _i9
          .Future<Iterable<_i1.DbModel<_i1.Generic<_i1.GenericData>>>>);
  @override
  _i9.Future<_i1.DbModel<_i1.Generic<_i1.GenericData>>?> getById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue:
                  Future<_i1.DbModel<_i1.Generic<_i1.GenericData>>?>.value())
          as _i9.Future<_i1.DbModel<_i1.Generic<_i1.GenericData>>?>);
  @override
  _i9.Future<Iterable<_i1.Generic<_i1.GenericData>>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: Future<Iterable<_i1.Generic<_i1.GenericData>>>.value(
                  <_i1.Generic<_i1.GenericData>>[]))
          as _i9.Future<Iterable<_i1.Generic<_i1.GenericData>>>);
  @override
  _i9.Future<Iterable<_i1.Generic<_i1.GenericData>>> getAllNonDeleted() =>
      (super.noSuchMethod(Invocation.method(#getAllNonDeleted, []),
              returnValue: Future<Iterable<_i1.Generic<_i1.GenericData>>>.value(
                  <_i1.Generic<_i1.GenericData>>[]))
          as _i9.Future<Iterable<_i1.Generic<_i1.GenericData>>>);
  @override
  _i9.Future<int> getLastRevision() =>
      (super.noSuchMethod(Invocation.method(#getLastRevision, []),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<bool> insertAndAddDirty(
          Iterable<_i1.Generic<_i1.GenericData>>? data) =>
      (super.noSuchMethod(Invocation.method(#insertAndAddDirty, [data]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDb extends _i2.Mock implements _i3.UserDb {
  MockUserDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i15.SharedPreferences get prefs =>
      (super.noSuchMethod(Invocation.getter(#prefs),
          returnValue: _FakeSharedPreferences_54()) as _i15.SharedPreferences);
  @override
  _i9.Future<dynamic> insertUser(_i1.User? user) =>
      (super.noSuchMethod(Invocation.method(#insertUser, [user]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> deleteUser() =>
      (super.noSuchMethod(Invocation.method(#deleteUser, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TokenDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenDb extends _i2.Mock implements _i3.TokenDb {
  MockTokenDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i15.SharedPreferences get prefs =>
      (super.noSuchMethod(Invocation.getter(#prefs),
          returnValue: _FakeSharedPreferences_54()) as _i15.SharedPreferences);
  @override
  _i9.Future<dynamic> persistToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#persistToken, [token]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<dynamic> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LicenseDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockLicenseDb extends _i2.Mock implements _i3.LicenseDb {
  MockLicenseDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i15.SharedPreferences get prefs =>
      (super.noSuchMethod(Invocation.getter(#prefs),
          returnValue: _FakeSharedPreferences_54()) as _i15.SharedPreferences);
  @override
  _i9.Future<dynamic> persistLicenses(List<_i1.License>? licenses) =>
      (super.noSuchMethod(Invocation.method(#persistLicenses, [licenses]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  List<_i1.License> getLicenses() =>
      (super.noSuchMethod(Invocation.method(#getLicenses, []),
          returnValue: <_i1.License>[]) as List<_i1.License>);
  @override
  _i9.Future<dynamic> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Notification].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotification extends _i2.Mock implements _i26.Notification {
  MockNotification() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.Future<dynamic> mockCancelAll() =>
      (super.noSuchMethod(Invocation.method(#mockCancelAll, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  String toString() => super.toString();
}
