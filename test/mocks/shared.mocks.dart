// Mocks generated by Mockito 5.0.16 from annotations
// in seagull/test/mocks/shared.dart.
// Do not manually edit this file.

import 'dart:async' as _i13;
import 'dart:convert' as _i17;
import 'dart:io' as _i8;
import 'dart:typed_data' as _i14;
import 'dart:ui' as _i18;

import 'package:flutter/gestures.dart' as _i12;
import 'package:flutter/material.dart' as _i11;
import 'package:flutter/rendering.dart' as _i19;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i16;
import 'package:http/http.dart' as _i5;
import 'package:logging/logging.dart' as _i4;
import 'package:mockito/mockito.dart' as _i2;
import 'package:record/record.dart' as _i10;
import 'package:seagull/db/all.dart' as _i3;
import 'package:seagull/models/all.dart' as _i1;
import 'package:seagull/repository/all.dart' as _i6;
import 'package:seagull/storage/all.dart' as _i7;
import 'package:shared_preferences/shared_preferences.dart' as _i9;

import 'shared.dart' as _i15;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDataDb_0<M extends _i1.DataModel> extends _i2.Fake
    implements _i3.DataDb<M> {}

class _FakeLogger_1 extends _i2.Fake implements _i4.Logger {}

class _FakeDbModel_2<M extends _i1.DataModel> extends _i2.Fake
    implements _i1.DbModel<M> {}

class _FakeBaseClient_3 extends _i2.Fake implements _i5.BaseClient {}

class _FakeDataUpdateResponse_4 extends _i2.Fake
    implements _i1.DataUpdateResponse {}

class _FakeTokenDb_5 extends _i2.Fake implements _i3.TokenDb {}

class _FakeUserDb_6 extends _i2.Fake implements _i3.UserDb {}

class _FakeLicenseDb_7 extends _i2.Fake implements _i3.LicenseDb {}

class _FakeUserRepository_8 extends _i2.Fake implements _i6.UserRepository {}

class _FakeUser_9 extends _i2.Fake implements _i1.User {}

class _FakeUserFileDb_10 extends _i2.Fake implements _i3.UserFileDb {}

class _FakeFileStorage_11 extends _i2.Fake implements _i7.FileStorage {}

class _FakeMultipartRequestBuilder_12 extends _i2.Fake
    implements _i6.MultipartRequestBuilder {}

class _FakeFile_13 extends _i2.Fake implements _i8.File {}

class _FakeBatch_14 extends _i2.Fake implements _i3.Batch {}

class _FakeSharedPreferences_15 extends _i2.Fake
    implements _i9.SharedPreferences {}

class _FakeDatabase_16 extends _i2.Fake implements _i3.Database {}

class _FakeMultipartRequest_17 extends _i2.Fake
    implements _i5.MultipartRequest {}

class _FakeAmplitude_18 extends _i2.Fake implements _i10.Amplitude {}

class _FakeResponse_19 extends _i2.Fake implements _i5.Response {}

class _FakeStreamedResponse_20 extends _i2.Fake
    implements _i5.StreamedResponse {}

class _FakeScrollPosition_21 extends _i2.Fake implements _i11.ScrollPosition {}

class _FakeScrollPhysics_22 extends _i2.Fake implements _i11.ScrollPhysics {}

class _FakeScrollContext_23 extends _i2.Fake implements _i11.ScrollContext {}

class _FakeValueNotifier_24<T> extends _i2.Fake
    implements _i11.ValueNotifier<T> {}

class _FakeScrollHoldController_25 extends _i2.Fake
    implements _i11.ScrollHoldController {}

class _FakeDrag_26 extends _i2.Fake implements _i12.Drag {}

class _FakeScrollMetrics_27 extends _i2.Fake implements _i11.ScrollMetrics {}

/// A class which mocks [ActivityRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityRepository extends _i2.Mock
    implements _i6.ActivityRepository {
  MockActivityRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.DataDb<_i1.Activity> get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDataDb_0<_i1.Activity>()) as _i3.DataDb<_i1.Activity>);
  @override
  String get authToken =>
      (super.noSuchMethod(Invocation.getter(#authToken), returnValue: '')
          as String);
  @override
  int get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: 0) as int);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get postPath =>
      (super.noSuchMethod(Invocation.getter(#postPath), returnValue: '')
          as String);
  @override
  int get postApiVersion =>
      (super.noSuchMethod(Invocation.getter(#postApiVersion), returnValue: 0)
          as int);
  @override
  _i6.JsonToDataModel<_i1.Activity> get fromJsonToDataModel =>
      (super.noSuchMethod(Invocation.getter(#fromJsonToDataModel),
              returnValue: (Map<String, dynamic> json) =>
                  _FakeDbModel_2<_i1.Activity>())
          as _i6.JsonToDataModel<_i1.Activity>);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i5.BaseClient get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeBaseClient_3()) as _i5.BaseClient);
  @override
  _i13.Future<bool> save(Iterable<_i1.Activity>? data) =>
      (super.noSuchMethod(Invocation.method(#save, [data]),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<Iterable<_i1.Activity>> load() => (super.noSuchMethod(
          Invocation.method(#load, []),
          returnValue: Future<Iterable<_i1.Activity>>.value(<_i1.Activity>[]))
      as _i13.Future<Iterable<_i1.Activity>>);
  @override
  _i13.Future<dynamic> fetchIntoDatabaseSynchronized() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabaseSynchronized, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> fetchIntoDatabase() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabase, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<Iterable<_i1.DbModel<_i1.Activity>>> fetchData(int? revision) =>
      (super.noSuchMethod(Invocation.method(#fetchData, [revision]),
              returnValue: Future<Iterable<_i1.DbModel<_i1.Activity>>>.value(
                  <_i1.DbModel<_i1.Activity>>[]))
          as _i13.Future<Iterable<_i1.DbModel<_i1.Activity>>>);
  @override
  _i13.Future<bool> synchronize() =>
      (super.noSuchMethod(Invocation.method(#synchronize, []),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<_i1.DataUpdateResponse> postData(
          Iterable<_i1.DbModel<_i1.Activity>>? data) =>
      (super.noSuchMethod(Invocation.method(#postData, [data]),
              returnValue: Future<_i1.DataUpdateResponse>.value(
                  _FakeDataUpdateResponse_4()))
          as _i13.Future<_i1.DataUpdateResponse>);
  @override
  _i13.Future<dynamic> handleFailedSync(
          Iterable<_i1.DataRevisionUpdate>? failed) =>
      (super.noSuchMethod(Invocation.method(#handleFailedSync, [failed]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> handleSuccessfullSync(
          Iterable<_i1.DataRevisionUpdate>? succeeded,
          Iterable<_i1.DbModel<_i1.Activity>>? dirtyData) =>
      (super.noSuchMethod(
          Invocation.method(#handleSuccessfullSync, [succeeded, dirtyData]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i2.Mock implements _i6.UserRepository {
  MockUserRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.TokenDb get tokenDb => (super.noSuchMethod(Invocation.getter(#tokenDb),
      returnValue: _FakeTokenDb_5()) as _i3.TokenDb);
  @override
  _i3.UserDb get userDb => (super.noSuchMethod(Invocation.getter(#userDb),
      returnValue: _FakeUserDb_6()) as _i3.UserDb);
  @override
  _i3.LicenseDb get licenseDb =>
      (super.noSuchMethod(Invocation.getter(#licenseDb),
          returnValue: _FakeLicenseDb_7()) as _i3.LicenseDb);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i5.BaseClient get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeBaseClient_3()) as _i5.BaseClient);
  @override
  _i6.UserRepository copyWith({String? baseUrl, _i5.BaseClient? client}) =>
      (super.noSuchMethod(
          Invocation.method(
              #copyWith, [], {#baseUrl: baseUrl, #client: client}),
          returnValue: _FakeUserRepository_8()) as _i6.UserRepository);
  @override
  _i13.Future<String> authenticate(
          {String? username,
          String? password,
          String? pushToken,
          DateTime? time}) =>
      (super.noSuchMethod(
          Invocation.method(#authenticate, [], {
            #username: username,
            #password: password,
            #pushToken: pushToken,
            #time: time
          }),
          returnValue: Future<String>.value('')) as _i13.Future<String>);
  @override
  _i13.Future<_i1.User> me(String? token) =>
      (super.noSuchMethod(Invocation.method(#me, [token]),
              returnValue: Future<_i1.User>.value(_FakeUser_9()))
          as _i13.Future<_i1.User>);
  @override
  _i13.Future<_i1.User> getUserFromDb() =>
      (super.noSuchMethod(Invocation.method(#getUserFromDb, []),
              returnValue: Future<_i1.User>.value(_FakeUser_9()))
          as _i13.Future<_i1.User>);
  @override
  _i13.Future<_i1.User> getUserFromApi(String? token) =>
      (super.noSuchMethod(Invocation.method(#getUserFromApi, [token]),
              returnValue: Future<_i1.User>.value(_FakeUser_9()))
          as _i13.Future<_i1.User>);
  @override
  _i13.Future<List<_i1.License>> getLicenses() =>
      (super.noSuchMethod(Invocation.method(#getLicenses, []),
              returnValue: Future<List<_i1.License>>.value(<_i1.License>[]))
          as _i13.Future<List<_i1.License>>);
  @override
  _i13.Future<List<_i1.License>> getLicensesFromApi(String? token) =>
      (super.noSuchMethod(Invocation.method(#getLicensesFromApi, [token]),
              returnValue: Future<List<_i1.License>>.value(<_i1.License>[]))
          as _i13.Future<List<_i1.License>>);
  @override
  _i13.Future<dynamic> logout([String? token]) =>
      (super.noSuchMethod(Invocation.method(#logout, [token]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<void> persistToken(String? token) => (super.noSuchMethod(
      Invocation.method(#persistToken, [token]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> createAccount(
          {String? language,
          String? usernameOrEmail,
          String? password,
          bool? termsOfUse,
          bool? privacyPolicy}) =>
      (super.noSuchMethod(
              Invocation.method(#createAccount, [], {
                #language: language,
                #usernameOrEmail: usernameOrEmail,
                #password: password,
                #termsOfUse: termsOfUse,
                #privacyPolicy: privacyPolicy
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SortableRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSortableRepository extends _i2.Mock
    implements _i6.SortableRepository {
  MockSortableRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.DataDb<_i1.Sortable<_i1.SortableData>> get db =>
      (super.noSuchMethod(Invocation.getter(#db),
              returnValue: _FakeDataDb_0<_i1.Sortable<_i1.SortableData>>())
          as _i3.DataDb<_i1.Sortable<_i1.SortableData>>);
  @override
  String get authToken =>
      (super.noSuchMethod(Invocation.getter(#authToken), returnValue: '')
          as String);
  @override
  int get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: 0) as int);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get postPath =>
      (super.noSuchMethod(Invocation.getter(#postPath), returnValue: '')
          as String);
  @override
  int get postApiVersion =>
      (super.noSuchMethod(Invocation.getter(#postApiVersion), returnValue: 0)
          as int);
  @override
  _i6.JsonToDataModel<_i1.Sortable<_i1.SortableData>> get fromJsonToDataModel =>
      (super.noSuchMethod(Invocation.getter(#fromJsonToDataModel),
              returnValue: (Map<String, dynamic> json) =>
                  _FakeDbModel_2<_i1.Sortable<_i1.SortableData>>())
          as _i6.JsonToDataModel<_i1.Sortable<_i1.SortableData>>);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i5.BaseClient get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeBaseClient_3()) as _i5.BaseClient);
  @override
  _i13.Future<bool> save(Iterable<_i1.Sortable<_i1.SortableData>>? data) =>
      (super.noSuchMethod(Invocation.method(#save, [data]),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<Iterable<_i1.Sortable<_i1.SortableData>>> load() =>
      (super.noSuchMethod(Invocation.method(#load, []),
          returnValue: Future<Iterable<_i1.Sortable<_i1.SortableData>>>.value(
              <_i1.Sortable<_i1.SortableData>>[])) as _i13
          .Future<Iterable<_i1.Sortable<_i1.SortableData>>>);
  @override
  _i13.Future<dynamic> fetchIntoDatabaseSynchronized() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabaseSynchronized, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> fetchIntoDatabase() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabase, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>> fetchData(
          int? revision) =>
      (super.noSuchMethod(Invocation.method(#fetchData, [revision]),
          returnValue: Future<
                  Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>.value(
              <_i1.DbModel<_i1.Sortable<_i1.SortableData>>>[])) as _i13
          .Future<Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>);
  @override
  _i13.Future<bool> synchronize() =>
      (super.noSuchMethod(Invocation.method(#synchronize, []),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<_i1.DataUpdateResponse> postData(
          Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>? data) =>
      (super.noSuchMethod(Invocation.method(#postData, [data]),
              returnValue: Future<_i1.DataUpdateResponse>.value(
                  _FakeDataUpdateResponse_4()))
          as _i13.Future<_i1.DataUpdateResponse>);
  @override
  _i13.Future<dynamic> handleFailedSync(
          Iterable<_i1.DataRevisionUpdate>? failed) =>
      (super.noSuchMethod(Invocation.method(#handleFailedSync, [failed]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> handleSuccessfullSync(
          Iterable<_i1.DataRevisionUpdate>? succeeded,
          Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>? dirtyData) =>
      (super.noSuchMethod(
          Invocation.method(#handleSuccessfullSync, [succeeded, dirtyData]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserFileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserFileRepository extends _i2.Mock
    implements _i6.UserFileRepository {
  MockUserFileRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i3.UserFileDb get userFileDb =>
      (super.noSuchMethod(Invocation.getter(#userFileDb),
          returnValue: _FakeUserFileDb_10()) as _i3.UserFileDb);
  @override
  _i7.FileStorage get fileStorage =>
      (super.noSuchMethod(Invocation.getter(#fileStorage),
          returnValue: _FakeFileStorage_11()) as _i7.FileStorage);
  @override
  _i6.MultipartRequestBuilder get multipartRequestBuilder =>
      (super.noSuchMethod(Invocation.getter(#multipartRequestBuilder),
              returnValue: _FakeMultipartRequestBuilder_12())
          as _i6.MultipartRequestBuilder);
  @override
  _i3.DataDb<_i1.UserFile> get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDataDb_0<_i1.UserFile>()) as _i3.DataDb<_i1.UserFile>);
  @override
  String get authToken =>
      (super.noSuchMethod(Invocation.getter(#authToken), returnValue: '')
          as String);
  @override
  int get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: 0) as int);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get postPath =>
      (super.noSuchMethod(Invocation.getter(#postPath), returnValue: '')
          as String);
  @override
  int get postApiVersion =>
      (super.noSuchMethod(Invocation.getter(#postApiVersion), returnValue: 0)
          as int);
  @override
  _i6.JsonToDataModel<_i1.UserFile> get fromJsonToDataModel =>
      (super.noSuchMethod(Invocation.getter(#fromJsonToDataModel),
              returnValue: (Map<String, dynamic> json) =>
                  _FakeDbModel_2<_i1.UserFile>())
          as _i6.JsonToDataModel<_i1.UserFile>);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i5.BaseClient get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeBaseClient_3()) as _i5.BaseClient);
  @override
  _i13.Future<Iterable<_i1.UserFile>> getAllLoadedFiles() =>
      (super.noSuchMethod(Invocation.method(#getAllLoadedFiles, []),
              returnValue:
                  Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
          as _i13.Future<Iterable<_i1.UserFile>>);
  @override
  _i13.Future<Iterable<_i1.UserFile>> load() => (super.noSuchMethod(
          Invocation.method(#load, []),
          returnValue: Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
      as _i13.Future<Iterable<_i1.UserFile>>);
  @override
  _i13.Future<bool> synchronize() =>
      (super.noSuchMethod(Invocation.method(#synchronize, []),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<Iterable<_i1.UserFile>> downloadUserFiles({int? limit}) => (super
      .noSuchMethod(Invocation.method(#downloadUserFiles, [], {#limit: limit}),
          returnValue:
              Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[])) as _i13
      .Future<Iterable<_i1.UserFile>>);
  @override
  _i13.Future<bool> save(Iterable<_i1.UserFile>? data) =>
      (super.noSuchMethod(Invocation.method(#save, [data]),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<dynamic> fetchIntoDatabaseSynchronized() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabaseSynchronized, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> fetchIntoDatabase() =>
      (super.noSuchMethod(Invocation.method(#fetchIntoDatabase, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<Iterable<_i1.DbModel<_i1.UserFile>>> fetchData(int? revision) =>
      (super.noSuchMethod(Invocation.method(#fetchData, [revision]),
              returnValue: Future<Iterable<_i1.DbModel<_i1.UserFile>>>.value(
                  <_i1.DbModel<_i1.UserFile>>[]))
          as _i13.Future<Iterable<_i1.DbModel<_i1.UserFile>>>);
  @override
  _i13.Future<_i1.DataUpdateResponse> postData(
          Iterable<_i1.DbModel<_i1.UserFile>>? data) =>
      (super.noSuchMethod(Invocation.method(#postData, [data]),
              returnValue: Future<_i1.DataUpdateResponse>.value(
                  _FakeDataUpdateResponse_4()))
          as _i13.Future<_i1.DataUpdateResponse>);
  @override
  _i13.Future<dynamic> handleFailedSync(
          Iterable<_i1.DataRevisionUpdate>? failed) =>
      (super.noSuchMethod(Invocation.method(#handleFailedSync, [failed]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> handleSuccessfullSync(
          Iterable<_i1.DataRevisionUpdate>? succeeded,
          Iterable<_i1.DbModel<_i1.UserFile>>? dirtyData) =>
      (super.noSuchMethod(
          Invocation.method(#handleSuccessfullSync, [succeeded, dirtyData]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FileStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileStorage extends _i2.Mock implements _i7.FileStorage {
  MockFileStorage() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get fileEnding =>
      (super.noSuchMethod(Invocation.getter(#fileEnding), returnValue: '')
          as String);
  @override
  int get maxSizeInBytes =>
      (super.noSuchMethod(Invocation.getter(#maxSizeInBytes), returnValue: 0)
          as int);
  @override
  _i13.Future<void> storeFile(List<int>? fileBytes, String? fileName) =>
      (super.noSuchMethod(Invocation.method(#storeFile, [fileBytes, fileName]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> storeImageThumb(
          List<int>? fileBytes, _i1.ImageThumb? imageThumb) =>
      (super.noSuchMethod(
              Invocation.method(#storeImageThumb, [fileBytes, imageThumb]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i8.File getFile(String? id) =>
      (super.noSuchMethod(Invocation.method(#getFile, [id]),
          returnValue: _FakeFile_13()) as _i8.File);
  @override
  _i8.File getImageThumb(_i1.ImageThumb? imageThumb) =>
      (super.noSuchMethod(Invocation.method(#getImageThumb, [imageThumb]),
          returnValue: _FakeFile_13()) as _i8.File);
  @override
  _i13.Future<dynamic> deleteUserFolder() =>
      (super.noSuchMethod(Invocation.method(#deleteUserFolder, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<bool> exists(_i8.File? file) =>
      (super.noSuchMethod(Invocation.method(#exists, [file]),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<_i8.File?> copyImageThumbForNotification(String? id) => (super
      .noSuchMethod(Invocation.method(#copyImageThumbForNotification, [id]),
          returnValue: Future<_i8.File?>.value()) as _i13.Future<_i8.File?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i2.Mock implements _i3.Database {
  MockDatabase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  _i13.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<T> transaction<T>(
          _i13.Future<T> Function(_i3.Transaction)? action,
          {bool? exclusive}) =>
      (super.noSuchMethod(
          Invocation.method(#transaction, [action], {#exclusive: exclusive}),
          returnValue: Future<T>.value(null)) as _i13.Future<T>);
  @override
  _i13.Future<int> getVersion() =>
      (super.noSuchMethod(Invocation.method(#getVersion, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<void> setVersion(int? version) => (super.noSuchMethod(
      Invocation.method(#setVersion, [version]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<T> devInvokeMethod<T>(String? method, [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#devInvokeMethod, [method, arguments]),
          returnValue: Future<T>.value(null)) as _i13.Future<T>);
  @override
  _i13.Future<T> devInvokeSqlMethod<T>(String? method, String? sql,
          [List<Object?>? arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#devInvokeSqlMethod, [method, sql, arguments]),
          returnValue: Future<T>.value(null)) as _i13.Future<T>);
  @override
  String toString() => super.toString();
  @override
  _i13.Future<void> execute(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#execute, [sql, arguments]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<int> rawInsert(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawInsert, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> insert(String? table, Map<String, Object?>? values,
          {String? nullColumnHack, _i3.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#insert, [
            table,
            values
          ], {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<List<Map<String, Object?>>> query(String? table,
          {bool? distinct,
          List<String>? columns,
          String? where,
          List<Object?>? whereArgs,
          String? groupBy,
          String? having,
          String? orderBy,
          int? limit,
          int? offset}) =>
      (super.noSuchMethod(
              Invocation.method(#query, [
                table
              ], {
                #distinct: distinct,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #groupBy: groupBy,
                #having: having,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset
              }),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i13.Future<List<Map<String, Object?>>>);
  @override
  _i13.Future<List<Map<String, Object?>>> rawQuery(String? sql,
          [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawQuery, [sql, arguments]),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i13.Future<List<Map<String, Object?>>>);
  @override
  _i13.Future<int> rawUpdate(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawUpdate, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> update(String? table, Map<String, Object?>? values,
          {String? where,
          List<Object?>? whereArgs,
          _i3.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [
            table,
            values
          ], {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> rawDelete(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawDelete, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> delete(String? table,
          {String? where, List<Object?>? whereArgs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i3.Batch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeBatch_14()) as _i3.Batch);
}

/// A class which mocks [SettingsDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsDb extends _i2.Mock implements _i3.SettingsDb {
  MockSettingsDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.SharedPreferences get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: _FakeSharedPreferences_15()) as _i9.SharedPreferences);
  @override
  String get language =>
      (super.noSuchMethod(Invocation.getter(#language), returnValue: '')
          as String);
  @override
  bool get alwaysUse24HourFormat =>
      (super.noSuchMethod(Invocation.getter(#alwaysUse24HourFormat),
          returnValue: false) as bool);
  @override
  bool get textToSpeech =>
      (super.noSuchMethod(Invocation.getter(#textToSpeech), returnValue: false)
          as bool);
  @override
  bool get rightCategoryExpanded =>
      (super.noSuchMethod(Invocation.getter(#rightCategoryExpanded),
          returnValue: false) as bool);
  @override
  bool get leftCategoryExpanded =>
      (super.noSuchMethod(Invocation.getter(#leftCategoryExpanded),
          returnValue: false) as bool);
  @override
  _i13.Future<dynamic> setLanguage(String? language) =>
      (super.noSuchMethod(Invocation.method(#setLanguage, [language]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> setAlwaysUse24HourFormat(bool? alwaysUse24HourFormat) =>
      (super.noSuchMethod(
          Invocation.method(#setAlwaysUse24HourFormat, [alwaysUse24HourFormat]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> setTextToSpeech(bool? textToSpeech) =>
      (super.noSuchMethod(Invocation.method(#setTextToSpeech, [textToSpeech]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> setRightCategoryExpanded(bool? expanded) => (super
      .noSuchMethod(Invocation.method(#setRightCategoryExpanded, [expanded]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> setLeftCategoryExpanded(bool? expanded) => (super
      .noSuchMethod(Invocation.method(#setLeftCategoryExpanded, [expanded]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ActivityDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityDb extends _i2.Mock implements _i3.ActivityDb {
  MockActivityDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i3.DbMapTo<_i1.Activity> get convertToDataModel =>
      (super.noSuchMethod(Invocation.getter(#convertToDataModel),
          returnValue: (Map<String, dynamic> map) =>
              _FakeDbModel_2<_i1.Activity>()) as _i3.DbMapTo<_i1.Activity>);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  _i3.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_16()) as _i3.Database);
  @override
  String get GET_ALL_DIRTY =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_DIRTY), returnValue: '')
          as String);
  @override
  String get GET_BY_ID_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_BY_ID_SQL), returnValue: '')
          as String);
  @override
  String get GET_ALL_SQL_NON_DELETED =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL_NON_DELETED),
          returnValue: '') as String);
  @override
  String get GET_ALL_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL), returnValue: '')
          as String);
  @override
  String get MAX_REVISION_SQL =>
      (super.noSuchMethod(Invocation.getter(#MAX_REVISION_SQL), returnValue: '')
          as String);
  @override
  _i13.Future<dynamic> insert(
          Iterable<_i1.DbModel<_i1.Activity>>? dataModels) =>
      (super.noSuchMethod(Invocation.method(#insert, [dataModels]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<Iterable<_i1.DbModel<_i1.Activity>>> getAllDirty() =>
      (super.noSuchMethod(Invocation.method(#getAllDirty, []),
              returnValue: Future<Iterable<_i1.DbModel<_i1.Activity>>>.value(
                  <_i1.DbModel<_i1.Activity>>[]))
          as _i13.Future<Iterable<_i1.DbModel<_i1.Activity>>>);
  @override
  _i13.Future<_i1.DbModel<_i1.Activity>?> getById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue: Future<_i1.DbModel<_i1.Activity>?>.value())
          as _i13.Future<_i1.DbModel<_i1.Activity>?>);
  @override
  _i13.Future<Iterable<_i1.Activity>> getAll() => (super.noSuchMethod(
          Invocation.method(#getAll, []),
          returnValue: Future<Iterable<_i1.Activity>>.value(<_i1.Activity>[]))
      as _i13.Future<Iterable<_i1.Activity>>);
  @override
  _i13.Future<Iterable<_i1.Activity>> getAllNonDeleted() => (super.noSuchMethod(
          Invocation.method(#getAllNonDeleted, []),
          returnValue: Future<Iterable<_i1.Activity>>.value(<_i1.Activity>[]))
      as _i13.Future<Iterable<_i1.Activity>>);
  @override
  _i13.Future<int> getLastRevision() =>
      (super.noSuchMethod(Invocation.method(#getLastRevision, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<bool> insertAndAddDirty(Iterable<_i1.Activity>? data) =>
      (super.noSuchMethod(Invocation.method(#insertAndAddDirty, [data]),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SortableDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockSortableDb extends _i2.Mock implements _i3.SortableDb {
  MockSortableDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i3.DbMapTo<_i1.Sortable<_i1.SortableData>> get convertToDataModel =>
      (super.noSuchMethod(Invocation.getter(#convertToDataModel),
              returnValue: (Map<String, dynamic> map) =>
                  _FakeDbModel_2<_i1.Sortable<_i1.SortableData>>())
          as _i3.DbMapTo<_i1.Sortable<_i1.SortableData>>);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  _i3.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_16()) as _i3.Database);
  @override
  String get GET_ALL_DIRTY =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_DIRTY), returnValue: '')
          as String);
  @override
  String get GET_BY_ID_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_BY_ID_SQL), returnValue: '')
          as String);
  @override
  String get GET_ALL_SQL_NON_DELETED =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL_NON_DELETED),
          returnValue: '') as String);
  @override
  String get GET_ALL_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL), returnValue: '')
          as String);
  @override
  String get MAX_REVISION_SQL =>
      (super.noSuchMethod(Invocation.getter(#MAX_REVISION_SQL), returnValue: '')
          as String);
  @override
  _i13.Future<dynamic> insert(
          Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>? dataModels) =>
      (super.noSuchMethod(Invocation.method(#insert, [dataModels]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>
      getAllDirty() => (super.noSuchMethod(Invocation.method(#getAllDirty, []),
          returnValue: Future<
                  Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>.value(
              <_i1.DbModel<_i1.Sortable<_i1.SortableData>>>[])) as _i13
          .Future<Iterable<_i1.DbModel<_i1.Sortable<_i1.SortableData>>>>);
  @override
  _i13.Future<_i1.DbModel<_i1.Sortable<_i1.SortableData>>?> getById(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue:
                  Future<_i1.DbModel<_i1.Sortable<_i1.SortableData>>?>.value())
          as _i13.Future<_i1.DbModel<_i1.Sortable<_i1.SortableData>>?>);
  @override
  _i13.Future<Iterable<_i1.Sortable<_i1.SortableData>>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
          returnValue: Future<Iterable<_i1.Sortable<_i1.SortableData>>>.value(
              <_i1.Sortable<_i1.SortableData>>[])) as _i13
          .Future<Iterable<_i1.Sortable<_i1.SortableData>>>);
  @override
  _i13.Future<Iterable<_i1.Sortable<_i1.SortableData>>> getAllNonDeleted() =>
      (super.noSuchMethod(Invocation.method(#getAllNonDeleted, []),
          returnValue: Future<Iterable<_i1.Sortable<_i1.SortableData>>>.value(
              <_i1.Sortable<_i1.SortableData>>[])) as _i13
          .Future<Iterable<_i1.Sortable<_i1.SortableData>>>);
  @override
  _i13.Future<int> getLastRevision() =>
      (super.noSuchMethod(Invocation.method(#getLastRevision, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<bool> insertAndAddDirty(
          Iterable<_i1.Sortable<_i1.SortableData>>? data) =>
      (super.noSuchMethod(Invocation.method(#insertAndAddDirty, [data]),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserFileDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserFileDb extends _i2.Mock implements _i3.UserFileDb {
  MockUserFileDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  String get GET_ALL_WITH_MISSING_FILES =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_WITH_MISSING_FILES),
          returnValue: '') as String);
  @override
  String get GET_ALL_WITH_LOADED_FILES =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_WITH_LOADED_FILES),
          returnValue: '') as String);
  @override
  String get SET_FILE_LOADED =>
      (super.noSuchMethod(Invocation.getter(#SET_FILE_LOADED), returnValue: '')
          as String);
  @override
  _i3.DbMapTo<_i1.UserFile> get convertToDataModel =>
      (super.noSuchMethod(Invocation.getter(#convertToDataModel),
          returnValue: (Map<String, dynamic> map) =>
              _FakeDbModel_2<_i1.UserFile>()) as _i3.DbMapTo<_i1.UserFile>);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  _i3.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_16()) as _i3.Database);
  @override
  String get GET_ALL_DIRTY =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_DIRTY), returnValue: '')
          as String);
  @override
  String get GET_BY_ID_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_BY_ID_SQL), returnValue: '')
          as String);
  @override
  String get GET_ALL_SQL_NON_DELETED =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL_NON_DELETED),
          returnValue: '') as String);
  @override
  String get GET_ALL_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL), returnValue: '')
          as String);
  @override
  String get MAX_REVISION_SQL =>
      (super.noSuchMethod(Invocation.getter(#MAX_REVISION_SQL), returnValue: '')
          as String);
  @override
  String missingFilesWithLimit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#missingFilesWithLimit, [limit]),
          returnValue: '') as String);
  @override
  _i13.Future<Iterable<_i1.UserFile>> getMissingFiles({int? limit}) => (super
      .noSuchMethod(Invocation.method(#getMissingFiles, [], {#limit: limit}),
          returnValue:
              Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[])) as _i13
      .Future<Iterable<_i1.UserFile>>);
  @override
  _i13.Future<Iterable<_i1.UserFile>> getAllLoadedFiles() =>
      (super.noSuchMethod(Invocation.method(#getAllLoadedFiles, []),
              returnValue:
                  Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
          as _i13.Future<Iterable<_i1.UserFile>>);
  @override
  _i13.Future<dynamic> setFileLoadedForId(String? id) =>
      (super.noSuchMethod(Invocation.method(#setFileLoadedForId, [id]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> insert(
          Iterable<_i1.DbModel<_i1.UserFile>>? dataModels) =>
      (super.noSuchMethod(Invocation.method(#insert, [dataModels]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<Iterable<_i1.DbModel<_i1.UserFile>>> getAllDirty() =>
      (super.noSuchMethod(Invocation.method(#getAllDirty, []),
              returnValue: Future<Iterable<_i1.DbModel<_i1.UserFile>>>.value(
                  <_i1.DbModel<_i1.UserFile>>[]))
          as _i13.Future<Iterable<_i1.DbModel<_i1.UserFile>>>);
  @override
  _i13.Future<_i1.DbModel<_i1.UserFile>?> getById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue: Future<_i1.DbModel<_i1.UserFile>?>.value())
          as _i13.Future<_i1.DbModel<_i1.UserFile>?>);
  @override
  _i13.Future<Iterable<_i1.UserFile>> getAll() => (super.noSuchMethod(
          Invocation.method(#getAll, []),
          returnValue: Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
      as _i13.Future<Iterable<_i1.UserFile>>);
  @override
  _i13.Future<Iterable<_i1.UserFile>> getAllNonDeleted() => (super.noSuchMethod(
          Invocation.method(#getAllNonDeleted, []),
          returnValue: Future<Iterable<_i1.UserFile>>.value(<_i1.UserFile>[]))
      as _i13.Future<Iterable<_i1.UserFile>>);
  @override
  _i13.Future<int> getLastRevision() =>
      (super.noSuchMethod(Invocation.method(#getLastRevision, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<bool> insertAndAddDirty(Iterable<_i1.UserFile>? data) =>
      (super.noSuchMethod(Invocation.method(#insertAndAddDirty, [data]),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GenericDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenericDb extends _i2.Mock implements _i3.GenericDb {
  MockGenericDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i3.DbMapTo<_i1.Generic<_i1.GenericData>> get convertToDataModel =>
      (super.noSuchMethod(Invocation.getter(#convertToDataModel),
              returnValue: (Map<String, dynamic> map) =>
                  _FakeDbModel_2<_i1.Generic<_i1.GenericData>>())
          as _i3.DbMapTo<_i1.Generic<_i1.GenericData>>);
  @override
  _i4.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_1())
          as _i4.Logger);
  @override
  _i3.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_16()) as _i3.Database);
  @override
  String get GET_ALL_DIRTY =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_DIRTY), returnValue: '')
          as String);
  @override
  String get GET_BY_ID_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_BY_ID_SQL), returnValue: '')
          as String);
  @override
  String get GET_ALL_SQL_NON_DELETED =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL_NON_DELETED),
          returnValue: '') as String);
  @override
  String get GET_ALL_SQL =>
      (super.noSuchMethod(Invocation.getter(#GET_ALL_SQL), returnValue: '')
          as String);
  @override
  String get MAX_REVISION_SQL =>
      (super.noSuchMethod(Invocation.getter(#MAX_REVISION_SQL), returnValue: '')
          as String);
  @override
  _i13.Future<Iterable<_i1.Generic<_i1.GenericData>>>
      getAllNonDeletedMaxRevision() => (super.noSuchMethod(
              Invocation.method(#getAllNonDeletedMaxRevision, []),
              returnValue: Future<Iterable<_i1.Generic<_i1.GenericData>>>.value(
                  <_i1.Generic<_i1.GenericData>>[]))
          as _i13.Future<Iterable<_i1.Generic<_i1.GenericData>>>);
  @override
  _i13.Future<dynamic> insert(
          Iterable<_i1.DbModel<_i1.Generic<_i1.GenericData>>>? dataModels) =>
      (super.noSuchMethod(Invocation.method(#insert, [dataModels]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<Iterable<_i1.DbModel<_i1.Generic<_i1.GenericData>>>>
      getAllDirty() => (super.noSuchMethod(Invocation.method(#getAllDirty, []),
          returnValue:
              Future<Iterable<_i1.DbModel<_i1.Generic<_i1.GenericData>>>>.value(
                  <_i1.DbModel<_i1.Generic<_i1.GenericData>>>[])) as _i13
          .Future<Iterable<_i1.DbModel<_i1.Generic<_i1.GenericData>>>>);
  @override
  _i13.Future<_i1.DbModel<_i1.Generic<_i1.GenericData>>?> getById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue:
                  Future<_i1.DbModel<_i1.Generic<_i1.GenericData>>?>.value())
          as _i13.Future<_i1.DbModel<_i1.Generic<_i1.GenericData>>?>);
  @override
  _i13.Future<Iterable<_i1.Generic<_i1.GenericData>>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: Future<Iterable<_i1.Generic<_i1.GenericData>>>.value(
                  <_i1.Generic<_i1.GenericData>>[]))
          as _i13.Future<Iterable<_i1.Generic<_i1.GenericData>>>);
  @override
  _i13.Future<Iterable<_i1.Generic<_i1.GenericData>>> getAllNonDeleted() =>
      (super.noSuchMethod(Invocation.method(#getAllNonDeleted, []),
              returnValue: Future<Iterable<_i1.Generic<_i1.GenericData>>>.value(
                  <_i1.Generic<_i1.GenericData>>[]))
          as _i13.Future<Iterable<_i1.Generic<_i1.GenericData>>>);
  @override
  _i13.Future<int> getLastRevision() =>
      (super.noSuchMethod(Invocation.method(#getLastRevision, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<bool> insertAndAddDirty(
          Iterable<_i1.Generic<_i1.GenericData>>? data) =>
      (super.noSuchMethod(Invocation.method(#insertAndAddDirty, [data]),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDb extends _i2.Mock implements _i3.UserDb {
  MockUserDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.SharedPreferences get prefs =>
      (super.noSuchMethod(Invocation.getter(#prefs),
          returnValue: _FakeSharedPreferences_15()) as _i9.SharedPreferences);
  @override
  _i13.Future<dynamic> insertUser(_i1.User? user) =>
      (super.noSuchMethod(Invocation.method(#insertUser, [user]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> deleteUser() =>
      (super.noSuchMethod(Invocation.method(#deleteUser, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TokenDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenDb extends _i2.Mock implements _i3.TokenDb {
  MockTokenDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.SharedPreferences get prefs =>
      (super.noSuchMethod(Invocation.getter(#prefs),
          returnValue: _FakeSharedPreferences_15()) as _i9.SharedPreferences);
  @override
  _i13.Future<dynamic> persistToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#persistToken, [token]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  _i13.Future<dynamic> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LicenseDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockLicenseDb extends _i2.Mock implements _i3.LicenseDb {
  MockLicenseDb() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i9.SharedPreferences get prefs =>
      (super.noSuchMethod(Invocation.getter(#prefs),
          returnValue: _FakeSharedPreferences_15()) as _i9.SharedPreferences);
  @override
  _i13.Future<dynamic> persistLicenses(List<_i1.License>? licenses) =>
      (super.noSuchMethod(Invocation.method(#persistLicenses, [licenses]),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  List<_i1.License> getLicenses() =>
      (super.noSuchMethod(Invocation.method(#getLicenses, []),
          returnValue: <_i1.License>[]) as List<_i1.License>);
  @override
  _i13.Future<dynamic> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebasePushService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebasePushService extends _i2.Mock
    implements _i6.FirebasePushService {
  MockFirebasePushService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i13.Future<String?> initPushToken() =>
      (super.noSuchMethod(Invocation.method(#initPushToken, []),
          returnValue: Future<String?>.value()) as _i13.Future<String?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MultipartRequestBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultipartRequestBuilder extends _i2.Mock
    implements _i6.MultipartRequestBuilder {
  MockMultipartRequestBuilder() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i5.MultipartRequest generateFileMultipartRequest(
          {Uri? uri, _i14.Uint8List? bytes, String? authToken, String? sha1}) =>
      (super.noSuchMethod(
          Invocation.method(#generateFileMultipartRequest, [],
              {#uri: uri, #bytes: bytes, #authToken: authToken, #sha1: sha1}),
          returnValue: _FakeMultipartRequest_17()) as _i5.MultipartRequest);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Notification].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotification extends _i2.Mock implements _i15.Notification {
  MockNotification() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i13.Future<dynamic> mockCancelAll() =>
      (super.noSuchMethod(Invocation.method(#mockCancelAll, []),
          returnValue: Future<dynamic>.value()) as _i13.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Record].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecord extends _i2.Mock implements _i10.Record {
  MockRecord() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i13.Future<void> start(
          {String? path,
          _i10.AudioEncoder? encoder = _i10.AudioEncoder.AAC,
          int? bitRate = 128000,
          double? samplingRate = 44100.0}) =>
      (super.noSuchMethod(
              Invocation.method(#start, [], {
                #path: path,
                #encoder: encoder,
                #bitRate: bitRate,
                #samplingRate: samplingRate
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<String?> stop() =>
      (super.noSuchMethod(Invocation.method(#stop, []),
          returnValue: Future<String?>.value()) as _i13.Future<String?>);
  @override
  _i13.Future<void> pause() => (super.noSuchMethod(
      Invocation.method(#pause, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> resume() => (super.noSuchMethod(
      Invocation.method(#resume, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<bool> isRecording() =>
      (super.noSuchMethod(Invocation.method(#isRecording, []),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<bool> isPaused() =>
      (super.noSuchMethod(Invocation.method(#isPaused, []),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<bool> hasPermission() =>
      (super.noSuchMethod(Invocation.method(#hasPermission, []),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  _i13.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<_i10.Amplitude> getAmplitude() =>
      (super.noSuchMethod(Invocation.method(#getAmplitude, []),
              returnValue: Future<_i10.Amplitude>.value(_FakeAmplitude_18()))
          as _i13.Future<_i10.Amplitude>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i2.Mock
    implements _i16.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool?> initialize(
          _i16.InitializationSettings? initializationSettings,
          {_i16.SelectNotificationCallback? onSelectNotification}) =>
      (super.noSuchMethod(
          Invocation.method(#initialize, [initializationSettings],
              {#onSelectNotification: onSelectNotification}),
          returnValue: Future<bool?>.value()) as _i13.Future<bool?>);
  @override
  _i13.Future<_i16.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
              Invocation.method(#getNotificationAppLaunchDetails, []),
              returnValue: Future<_i16.NotificationAppLaunchDetails?>.value())
          as _i13.Future<_i16.NotificationAppLaunchDetails?>);
  @override
  _i13.Future<void> show(int? id, String? title, String? body,
          _i16.NotificationDetails? notificationDetails, {String? payload}) =>
      (super.noSuchMethod(
              Invocation.method(#show, [id, title, body, notificationDetails],
                  {#payload: payload}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> cancel(int? id, {String? tag}) => (super.noSuchMethod(
      Invocation.method(#cancel, [id], {#tag: tag}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> cancelAll() => (super.noSuchMethod(
      Invocation.method(#cancelAll, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> schedule(
          int? id,
          String? title,
          String? body,
          DateTime? scheduledDate,
          _i16.NotificationDetails? notificationDetails,
          {String? payload,
          bool? androidAllowWhileIdle = false}) =>
      (super.noSuchMethod(
              Invocation.method(#schedule, [
                id,
                title,
                body,
                scheduledDate,
                notificationDetails
              ], {
                #payload: payload,
                #androidAllowWhileIdle: androidAllowWhileIdle
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> zonedSchedule(
          int? id,
          String? title,
          String? body,
          _i6.TZDateTime? scheduledDate,
          _i16.NotificationDetails? notificationDetails,
          {_i16.UILocalNotificationDateInterpretation?
              uiLocalNotificationDateInterpretation,
          bool? androidAllowWhileIdle,
          String? payload,
          _i16.DateTimeComponents? matchDateTimeComponents}) =>
      (super.noSuchMethod(
              Invocation.method(#zonedSchedule, [
                id,
                title,
                body,
                scheduledDate,
                notificationDetails
              ], {
                #uiLocalNotificationDateInterpretation:
                    uiLocalNotificationDateInterpretation,
                #androidAllowWhileIdle: androidAllowWhileIdle,
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> periodicallyShow(
          int? id,
          String? title,
          String? body,
          _i16.RepeatInterval? repeatInterval,
          _i16.NotificationDetails? notificationDetails,
          {String? payload,
          bool? androidAllowWhileIdle = false}) =>
      (super.noSuchMethod(
              Invocation.method(#periodicallyShow, [
                id,
                title,
                body,
                repeatInterval,
                notificationDetails
              ], {
                #payload: payload,
                #androidAllowWhileIdle: androidAllowWhileIdle
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> showDailyAtTime(
          int? id,
          String? title,
          String? body,
          _i16.Time? notificationTime,
          _i16.NotificationDetails? notificationDetails,
          {String? payload}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #showDailyAtTime,
                  [id, title, body, notificationTime, notificationDetails],
                  {#payload: payload}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> showWeeklyAtDayAndTime(
          int? id,
          String? title,
          String? body,
          _i16.Day? day,
          _i16.Time? notificationTime,
          _i16.NotificationDetails? notificationDetails,
          {String? payload}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #showWeeklyAtDayAndTime,
                  [id, title, body, day, notificationTime, notificationDetails],
                  {#payload: payload}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<List<_i16.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
              Invocation.method(#pendingNotificationRequests, []),
              returnValue: Future<List<_i16.PendingNotificationRequest>>.value(
                  <_i16.PendingNotificationRequest>[]))
          as _i13.Future<List<_i16.PendingNotificationRequest>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseClient extends _i2.Mock implements _i5.BaseClient {
  MockBaseClient() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i5.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_19()))
          as _i13.Future<_i5.Response>);
  @override
  _i13.Future<_i5.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_19()))
          as _i13.Future<_i5.Response>);
  @override
  _i13.Future<_i5.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i17.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_19()))
          as _i13.Future<_i5.Response>);
  @override
  _i13.Future<_i5.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i17.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_19()))
          as _i13.Future<_i5.Response>);
  @override
  _i13.Future<_i5.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i17.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_19()))
          as _i13.Future<_i5.Response>);
  @override
  _i13.Future<_i5.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i17.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i5.Response>.value(_FakeResponse_19()))
          as _i13.Future<_i5.Response>);
  @override
  _i13.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i13.Future<String>);
  @override
  _i13.Future<_i14.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i14.Uint8List>.value(_i14.Uint8List(0)))
          as _i13.Future<_i14.Uint8List>);
  @override
  _i13.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i5.StreamedResponse>.value(
                  _FakeStreamedResponse_20()))
          as _i13.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ScrollController].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollController extends _i2.Mock implements _i11.ScrollController {
  MockScrollController() {
    _i2.throwOnMissingStub(this);
  }

  @override
  bool get keepScrollOffset =>
      (super.noSuchMethod(Invocation.getter(#keepScrollOffset),
          returnValue: false) as bool);
  @override
  double get initialScrollOffset =>
      (super.noSuchMethod(Invocation.getter(#initialScrollOffset),
          returnValue: 0.0) as double);
  @override
  Iterable<_i11.ScrollPosition> get positions => (super.noSuchMethod(
      Invocation.getter(#positions),
      returnValue: <_i11.ScrollPosition>[]) as Iterable<_i11.ScrollPosition>);
  @override
  bool get hasClients =>
      (super.noSuchMethod(Invocation.getter(#hasClients), returnValue: false)
          as bool);
  @override
  _i11.ScrollPosition get position =>
      (super.noSuchMethod(Invocation.getter(#position),
          returnValue: _FakeScrollPosition_21()) as _i11.ScrollPosition);
  @override
  double get offset =>
      (super.noSuchMethod(Invocation.getter(#offset), returnValue: 0.0)
          as double);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i13.Future<void> animateTo(double? offset,
          {Duration? duration, _i11.Curve? curve}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #animateTo, [offset], {#duration: duration, #curve: curve}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  void jumpTo(double? value) =>
      super.noSuchMethod(Invocation.method(#jumpTo, [value]),
          returnValueForMissingStub: null);
  @override
  void attach(_i11.ScrollPosition? position) =>
      super.noSuchMethod(Invocation.method(#attach, [position]),
          returnValueForMissingStub: null);
  @override
  void detach(_i11.ScrollPosition? position) =>
      super.noSuchMethod(Invocation.method(#detach, [position]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i11.ScrollPosition createScrollPosition(_i11.ScrollPhysics? physics,
          _i11.ScrollContext? context, _i11.ScrollPosition? oldPosition) =>
      (super.noSuchMethod(
          Invocation.method(
              #createScrollPosition, [physics, context, oldPosition]),
          returnValue: _FakeScrollPosition_21()) as _i11.ScrollPosition);
  @override
  String toString() => super.toString();
  @override
  void debugFillDescription(List<String>? description) => super.noSuchMethod(
      Invocation.method(#debugFillDescription, [description]),
      returnValueForMissingStub: null);
  @override
  void addListener(_i18.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i18.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ScrollPosition].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollPosition extends _i2.Mock implements _i11.ScrollPosition {
  MockScrollPosition() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i11.ScrollPhysics get physics =>
      (super.noSuchMethod(Invocation.getter(#physics),
          returnValue: _FakeScrollPhysics_22()) as _i11.ScrollPhysics);
  @override
  _i11.ScrollContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeScrollContext_23()) as _i11.ScrollContext);
  @override
  bool get keepScrollOffset =>
      (super.noSuchMethod(Invocation.getter(#keepScrollOffset),
          returnValue: false) as bool);
  @override
  _i11.ValueNotifier<bool> get isScrollingNotifier => (super.noSuchMethod(
      Invocation.getter(#isScrollingNotifier),
      returnValue: _FakeValueNotifier_24<bool>()) as _i11.ValueNotifier<bool>);
  @override
  double get minScrollExtent =>
      (super.noSuchMethod(Invocation.getter(#minScrollExtent), returnValue: 0.0)
          as double);
  @override
  double get maxScrollExtent =>
      (super.noSuchMethod(Invocation.getter(#maxScrollExtent), returnValue: 0.0)
          as double);
  @override
  bool get hasContentDimensions =>
      (super.noSuchMethod(Invocation.getter(#hasContentDimensions),
          returnValue: false) as bool);
  @override
  double get pixels =>
      (super.noSuchMethod(Invocation.getter(#pixels), returnValue: 0.0)
          as double);
  @override
  bool get hasPixels =>
      (super.noSuchMethod(Invocation.getter(#hasPixels), returnValue: false)
          as bool);
  @override
  double get viewportDimension => (super
          .noSuchMethod(Invocation.getter(#viewportDimension), returnValue: 0.0)
      as double);
  @override
  bool get hasViewportDimension =>
      (super.noSuchMethod(Invocation.getter(#hasViewportDimension),
          returnValue: false) as bool);
  @override
  bool get haveDimensions => (super
          .noSuchMethod(Invocation.getter(#haveDimensions), returnValue: false)
      as bool);
  @override
  bool get allowImplicitScrolling =>
      (super.noSuchMethod(Invocation.getter(#allowImplicitScrolling),
          returnValue: false) as bool);
  @override
  _i19.ScrollDirection get userScrollDirection =>
      (super.noSuchMethod(Invocation.getter(#userScrollDirection),
          returnValue: _i19.ScrollDirection.idle) as _i19.ScrollDirection);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i11.AxisDirection get axisDirection =>
      (super.noSuchMethod(Invocation.getter(#axisDirection),
          returnValue: _i11.AxisDirection.up) as _i11.AxisDirection);
  @override
  _i11.Axis get axis => (super.noSuchMethod(Invocation.getter(#axis),
      returnValue: _i11.Axis.horizontal) as _i11.Axis);
  @override
  bool get outOfRange =>
      (super.noSuchMethod(Invocation.getter(#outOfRange), returnValue: false)
          as bool);
  @override
  bool get atEdge =>
      (super.noSuchMethod(Invocation.getter(#atEdge), returnValue: false)
          as bool);
  @override
  double get extentBefore =>
      (super.noSuchMethod(Invocation.getter(#extentBefore), returnValue: 0.0)
          as double);
  @override
  double get extentInside =>
      (super.noSuchMethod(Invocation.getter(#extentInside), returnValue: 0.0)
          as double);
  @override
  double get extentAfter =>
      (super.noSuchMethod(Invocation.getter(#extentAfter), returnValue: 0.0)
          as double);
  @override
  void absorb(_i11.ScrollPosition? other) =>
      super.noSuchMethod(Invocation.method(#absorb, [other]),
          returnValueForMissingStub: null);
  @override
  double setPixels(double? newPixels) =>
      (super.noSuchMethod(Invocation.method(#setPixels, [newPixels]),
          returnValue: 0.0) as double);
  @override
  void correctPixels(double? value) =>
      super.noSuchMethod(Invocation.method(#correctPixels, [value]),
          returnValueForMissingStub: null);
  @override
  void correctBy(double? correction) =>
      super.noSuchMethod(Invocation.method(#correctBy, [correction]),
          returnValueForMissingStub: null);
  @override
  void forcePixels(double? value) =>
      super.noSuchMethod(Invocation.method(#forcePixels, [value]),
          returnValueForMissingStub: null);
  @override
  void saveScrollOffset() =>
      super.noSuchMethod(Invocation.method(#saveScrollOffset, []),
          returnValueForMissingStub: null);
  @override
  void restoreScrollOffset() =>
      super.noSuchMethod(Invocation.method(#restoreScrollOffset, []),
          returnValueForMissingStub: null);
  @override
  void restoreOffset(double? offset, {bool? initialRestore = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #restoreOffset, [offset], {#initialRestore: initialRestore}),
          returnValueForMissingStub: null);
  @override
  void saveOffset() => super.noSuchMethod(Invocation.method(#saveOffset, []),
      returnValueForMissingStub: null);
  @override
  double applyBoundaryConditions(double? value) =>
      (super.noSuchMethod(Invocation.method(#applyBoundaryConditions, [value]),
          returnValue: 0.0) as double);
  @override
  bool applyViewportDimension(double? viewportDimension) => (super.noSuchMethod(
      Invocation.method(#applyViewportDimension, [viewportDimension]),
      returnValue: false) as bool);
  @override
  bool applyContentDimensions(
          double? minScrollExtent, double? maxScrollExtent) =>
      (super.noSuchMethod(
          Invocation.method(
              #applyContentDimensions, [minScrollExtent, maxScrollExtent]),
          returnValue: false) as bool);
  @override
  bool correctForNewDimensions(
          _i11.ScrollMetrics? oldPosition, _i11.ScrollMetrics? newPosition) =>
      (super.noSuchMethod(
          Invocation.method(
              #correctForNewDimensions, [oldPosition, newPosition]),
          returnValue: false) as bool);
  @override
  void applyNewDimensions() =>
      super.noSuchMethod(Invocation.method(#applyNewDimensions, []),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> ensureVisible(_i11.RenderObject? object,
          {double? alignment = 0.0,
          Duration? duration = const Duration(seconds: 0),
          _i11.Curve? curve = _i11.Curves.ease,
          _i11.ScrollPositionAlignmentPolicy? alignmentPolicy =
              _i11.ScrollPositionAlignmentPolicy.explicit,
          _i11.RenderObject? targetRenderObject}) =>
      (super.noSuchMethod(
              Invocation.method(#ensureVisible, [
                object
              ], {
                #alignment: alignment,
                #duration: duration,
                #curve: curve,
                #alignmentPolicy: alignmentPolicy,
                #targetRenderObject: targetRenderObject
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> animateTo(double? to,
          {Duration? duration, _i11.Curve? curve}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #animateTo, [to], {#duration: duration, #curve: curve}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  void jumpTo(double? value) =>
      super.noSuchMethod(Invocation.method(#jumpTo, [value]),
          returnValueForMissingStub: null);
  @override
  void pointerScroll(double? delta) =>
      super.noSuchMethod(Invocation.method(#pointerScroll, [delta]),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> moveTo(double? to,
          {Duration? duration, _i11.Curve? curve, bool? clamp = true}) =>
      (super.noSuchMethod(
              Invocation.method(#moveTo, [to],
                  {#duration: duration, #curve: curve, #clamp: clamp}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  void jumpToWithoutSettling(double? value) =>
      super.noSuchMethod(Invocation.method(#jumpToWithoutSettling, [value]),
          returnValueForMissingStub: null);
  @override
  _i11.ScrollHoldController hold(_i18.VoidCallback? holdCancelCallback) =>
      (super.noSuchMethod(Invocation.method(#hold, [holdCancelCallback]),
              returnValue: _FakeScrollHoldController_25())
          as _i11.ScrollHoldController);
  @override
  _i12.Drag drag(_i11.DragStartDetails? details,
          _i18.VoidCallback? dragCancelCallback) =>
      (super.noSuchMethod(
          Invocation.method(#drag, [details, dragCancelCallback]),
          returnValue: _FakeDrag_26()) as _i12.Drag);
  @override
  void beginActivity(_i11.ScrollActivity? newActivity) =>
      super.noSuchMethod(Invocation.method(#beginActivity, [newActivity]),
          returnValueForMissingStub: null);
  @override
  void didStartScroll() =>
      super.noSuchMethod(Invocation.method(#didStartScroll, []),
          returnValueForMissingStub: null);
  @override
  void didUpdateScrollPositionBy(double? delta) =>
      super.noSuchMethod(Invocation.method(#didUpdateScrollPositionBy, [delta]),
          returnValueForMissingStub: null);
  @override
  void didEndScroll() =>
      super.noSuchMethod(Invocation.method(#didEndScroll, []),
          returnValueForMissingStub: null);
  @override
  void didOverscrollBy(double? value) =>
      super.noSuchMethod(Invocation.method(#didOverscrollBy, [value]),
          returnValueForMissingStub: null);
  @override
  void didUpdateScrollDirection(_i19.ScrollDirection? direction) => super
      .noSuchMethod(Invocation.method(#didUpdateScrollDirection, [direction]),
          returnValueForMissingStub: null);
  @override
  void didUpdateScrollMetrics() =>
      super.noSuchMethod(Invocation.method(#didUpdateScrollMetrics, []),
          returnValueForMissingStub: null);
  @override
  bool recommendDeferredLoading(_i11.BuildContext? context) => (super
      .noSuchMethod(Invocation.method(#recommendDeferredLoading, [context]),
          returnValue: false) as bool);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  void debugFillDescription(List<String>? description) => super.noSuchMethod(
      Invocation.method(#debugFillDescription, [description]),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void addListener(_i18.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i18.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i11.ScrollMetrics copyWith(
          {double? minScrollExtent,
          double? maxScrollExtent,
          double? pixels,
          double? viewportDimension,
          _i11.AxisDirection? axisDirection}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #minScrollExtent: minScrollExtent,
            #maxScrollExtent: maxScrollExtent,
            #pixels: pixels,
            #viewportDimension: viewportDimension,
            #axisDirection: axisDirection
          }),
          returnValue: _FakeScrollMetrics_27()) as _i11.ScrollMetrics);
}
